/*
 * $Id$
 */

/* Read doc/howtosvn.txt and use this format for entry headers:
   YYYY-MM-DD HH:MM UTC[-|+]hhmm Your Full Name (your_email address)
   2010-12-31 13:59 UTC+0100 Foo Bar (foo.bar foobar.org)

   This work is licensed under the Creative Commons Attribution-ShareAlike
   License. To view a copy of this license, visit
   http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
   Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305,
   USA.  A summary of the license and the full legal text is included
   in file: COPYING.  If you wish to distribute some or all of this work
   under different terms, please contact respective author(s).
   The license applies to all entries newer than 2009-04-28.
*/

2013-06-03 17:32 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r227)
  * hbqtwidgets/getlist.prg
  * hbqtwidgets/getsys.prg
    ! Fixed: default behavior of WHEN focus at startup of the GETLIST.
       Reported and supported with demo code, by Nelson Pires.

2013-06-03 01:33 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r226)
  * hbide/hbide_v.ch
    % Version bump.

  * hbqtwidgets/charts.prg
    + Implemented: the concept of providing pallete of colors to be 
       used for undefined color attribute of a piece of data.
        :setPallete( cName, aPalleteOfQColors )
        :getPallete( cName )

    % Changed: to keep the undefined colors to remain the same irrespective 
       of data retrieval calls. Before it was changing arbitrarily.
    
  * hbqtwidgets/dashboard.prg
    + Increased: the number of assignable attributes for object of type BANNER.
       Now attributes can be sent as { cnaColor, nSpeedInMSeconds, nFontHeight }.
       Before nSpeedInMSeconds was 250 and and nFontHeight was 36.

2013-06-02 17:53 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r225)
  * hbqtwidgets/hbqtbrowse.prg
    % Refined: METHOD editCell() to honor pressed key being populated 
       properly and with respect to PICTURE clause, both in Numeric 
       and Date fields.

  * hbqtwidgets/tests/browdb.prg
    % Modified: code to demonstrate the above fixed effects.

2013-05-31 04:49 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r224)
  + hbqtwidgets/resources/alarm-clock.png
  + hbqtwidgets/resources/banner.png
  + hbqtwidgets/resources/images.png
  + hbqtwidgets/resources/layout_content.png
  + hbqtwidgets/resources/numbers.png
  + hbqtwidgets/resources/objects.png
    + Added: few more images.

  * hbqtwidgets/hbqtwidgets.qrc
    + Added: above images.

  * hbide/hbide_v.ch
  * hbdbu/dbu.prg
    % Version Bump.

  * hbqtwidgets/charts.prg
    ! few more refinements and a bug fix.

  * hbqtwidgets/misc.prg
  * hbqtwidgets/treeview.prg

  * hbqtwidgets/hbqtwidgets.hbp
    + Added: dashboard.prg 

  + hbqtwidgets/dashboard.prg
    + Implemented: an embeddable DashBoard component.
       This all the important widget will liven your applications with 
       manifold acceptance by your clients. It presents the business data 
       in meaningful visual representation in real-time, a concept which 
       is available in some very high end ERPs only.

       OBJECTS      DashBoard exposes the following objects:
       =======
       1. Figure  : Any expression returning digits, i.e., 216765.52, Time().
                    This object is useful where you want to display running 
                    balances or summed figures. 

       2. Banner  : A marquee where application can inform the user about 
                    anything from simple announcements to new offers. 
                    Application vendor also can offer a banner where info 
                    is pulled from a web-server. This may enhance your 
                    interaction with the end-user.

       3. Graph   : A graphical representation of data. Currently only 
                    Bar and Pie charts are available.

       4. Browser : A HbQtBrowse object comsuming a two dimensional array 
                    of data which gets updated in real-time.

       5. Picture : A simple slide-show object where image source can be 
                    changed as per application's flow. For example, the 
                    images souce can be hooked to stock items if a stock 
                    master module is activated. Imagination is the limit.

       ANATOMY      The component has the following wings:
       =======    
       1. QWidget   Holding all other parts in a QGridlayout.
       2. QTabbar   Exposing multiple stacks/panels hosting various objects.
       3. QToolbar  Top toolbar containing various actions to manipulated 
                    objects and other parts of the components.
       4. QToolbar  Left toolbar holding actions to manipulate windows 
                    hosting objects.
       5. QStackedWidget Hosting multiple panels.
       6. QMdiArea  Multiple - hosting various windows of objects.
       7. QTreeWidget Hosting application-pushed object definitions invocable 
                    by the appln user.
       8. QStatusbar Exposing different parts to provide in-time statistics.

       ACTIONS      Following are the actions available:
       =======
       1. Toolbar-T a) Create a New DashBoard
                    b) Activate another DashBoard
                    c) Create a New Browser Object
                    d)              Figure
                    e)              Graph
                    f)              Banner
                    g)              Picture
                    h) Toggle Objects Tree's Visibility
                    i) Toggle DashBoard/Panels Tabbar's Visibility.

       2. Toolbar-L j) Toggle tabbar of objects visible on active dashboard.
                    k) Position objects on active dashboard with original oordinates.
                    l) Position Objects Cascaded.
                    k) Position Objects Tiled.
                    l) Position Objects Full Screen in Viewport.
                    m) Stack objects Vertically.
                    n) Stack Objects Horizontally.
                    o) Zoom Out Objects.
                    p) Zoom In Objects.

       3. DashBoards/Panels Tabbar ( When toggled to visibility )
                    q) Lock/Unlock Dashboard/Panel.
                    r) Clear DashBoard Objects ( If it is Unlocked ).

       ENVIRONMENT  Following points describe its eco system:
       ===========
       1.           Component passes all the user actions to the application and 
                    waits for the appropriate reply which is then carried on.

       2.           It does not save/restore anything at its own. Rather provides
                    the methods to retrieve and push its environment.

       3.           Component can hosted inside any container widget or layout
                    application provides. Itf no parent is supplied then 
                    it itself becomes the top-level widget.

  + hbqtwidgets/tests/dashbrd.prg
    + Added: a reasonably self contained application to demonstrate the 
       usage of HbQtDashBoard() widget.

2013-05-22 12:56 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r223)
  * hbqt/qtgui/qth/QSound.qth
    ! Fixed: case sensitivity in #include section, pointed-out by Luigi, thanks.

2013-05-21 11:59 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r222)
  * hbide/edit.prg
    ! Fixed: Qt 5.x introduced bug where "Toggle Selection Mode" button was 
       producing GPF. Reported by Maurizio, thanks.

  * hbqtwidgets/alert.prg
    ! Tried to fix bug on Linux where HbQtAler() was reporing missing 
       "font-name" property and possible GPF on that account.
       Reported by Alain.

2013-05-17 18:16 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r221)
  * hbqt/qtgui/hbqtgui.ch
    + Added: Constants : QLineF_* 

  + hbqtwidgets/resources/balance.png
  + hbqtwidgets/resources/chart_bar.png
  + hbqtwidgets/resources/chart_line.png
  + hbqtwidgets/resources/chart_pie.png
  + hbqtwidgets/resources/chart_pie_3d.png
  + hbqtwidgets/resources/dollar.png
  + hbqtwidgets/resources/legend.png
  + hbqtwidgets/resources/shading.png
  + hbqtwidgets/resources/tag.png
  + hbqtwidgets/resources/treeview.png
  * hbqtwidgets/hbqtwidgets.qrc
    + Added: new images usable in HbQtCharts and HbQtDashBoard ( upcoming ).

  * hbqtwidgets/hbqtstd.ch
    + Added: constants : HBQT_CHART_*, HBQTMDI_*

  * hbqtwidgets/hbqtwidgets.hbp
    + Added: charts.prg.
    
  * hbqtwidgets/getlist.prg
    % Changed: if a GETLIST is QREAD without a parent and <NOMODAL> 
       clause is not specified, then the the window hosting GETs 
       will be executed in modal state.

  * hbqtwidgets/hbqtbrowse.prg
    ! Fixed: a bug where RTE was generated when ::oParent was not supplied.

  * hbqtwidgets/hbqtdbu.prg
    % Rearrangement of some code in logical sections.
      Moved HBQTMDI_* constants to qtstd.ch.

  + hbqtwidgets/charts.prg
    + Implemented: HbQtCharts() class.
       This class is inspired from:
         https://github.com/0TheFox0/OpenChart/blob/master/
           Thanks.

       Charts class is responsible to display graphical representation of 
       business data. Currently BAR and 2D PIE charts are available, but 
       later many other types will be developed. For LINES and 3D PIE,
       code is already there but needs some tweaks. So those chart types 
       are not implemented yet.

         #include "qtstd.ch"

         oParent := QGroupBox( oMain )
         oParent:resize( 300, 200 )

         WITH OBJECT oChart := HbQtCharts():new( oParent )
            :setType( HBQT_CHART_BARS )
            :enableLegend( .F. )
            :setTitle( "Monthly Sales: Jan-Jun 2013 ('000,000)" )

            :addItem( "Jul" , 66, QColor( 210, 25, 125 ) )
            :addItem( "Aug" , 32 )
            :addItem( "Sep" ,  5 )
            :addItem( "Oct" , 14 )
            :addItem( "Nov" , 87 )
            :addItem( "Dec" , 44 )

            :create()

            :enableToolbar( .T. )
         ENDWITH 
       
       Charts window contains a left-side, toggleable, toolbar and 
       chart display area. Toolbar contains these actions:
         1. Action Display Bar-Chart
         2. Action Display Pie-Chart
         3. Action Toggle Legends
         4. Action Toggle Shadows
         5. Action Toggle Labels
         6. Action Toggle Values
         7. Action Print Preview

       Besides above action-icons, interface offers two keyboard actions:
         P  Action Print Preview
         T  Action Toggle Toolbar

       Charts class can be hosted on any container widget or layout.
       It is also scheduled to be added to @...QGET...BARCHART... and variants.
       For my projects it is used as a part of HbQtDashBoard() object.
       HbQtDashBoard() will be committed next after finalization of 
       its usability components.

       Note: Charts class needs more work but it has already showed me 
       a promise. Speak-out your ideas and hopefully those will get 
       implemented. Also, if someone can write code for other type of 
       charts, is welcome. Believe me, I am extremely poor in maths.   

2013-05-15 16:00 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r220)
  * hbqtwidgets/getsys.prg
    ! Fixed: @...QGET...CHECKBOX was not updating its variable on 
       check/uncheck operations, pointed out by Zoran, thanks.

2013-05-13 18:25 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r219)
  * hbdbu/dbu.prg
    % Changed: the time-line when default rdd driver has to be activated.

  * hbqtwidgets/hbqtdbu.prg
    + Implemented: attaching a non-structural index to an open table.
       A new "Attach an Index" icon is placed adjoining "Open Table" icon, 
       which, when activated, will ask for a disk file in a select File dialog.
       All types of files are offered to be selected, to be generic, so that 
       applications generating non-standard extenstion could take use of 
       this feature. Selected file is supplied with OrdListAdd() function, 
       leaving RDD sub-system to determine the next course.

    + Implemented: RDD specific following settings:
       RDDI_STRUCTORD
       RDDI_MULTITAG
       RDDI_MEMOTYPE
        Whenever a RDD Driver is selected from the combobox, a tiny dialog 
        is opened to fetch above settings. If OKeyed, then RDDInfo()
        function is called as per selections.
       
    ; I have never used any other RDD except DBFCDX, so am not 
      familiar with exact behavior of other Rdds. So please shout if 
      this implementation needs other tweaks.

2013-04-30 12:47 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r218)
  * hbqtwidgets/getsys.prg
    + Implemented: validating a GET's VALID clause even if another GET is 
       selected from mouse, just like Clipper's. If VALID fails then focus 
       is retained in the same GET. Now you can build forms with almost 
       like Clipper functionality.

2013-04-29 12:59 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r217)
  * hbqt/tests/demoqtc.prg
    + Added code to open a GtQtc window from withing a GUI dialog.
       The concept can be encapsulated inside a menu option or any other action.
       Requested by Massimo.

2013-04-26 13:49 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r216)
  * hbqt/qtgui/hbqt_hbqvalidator.cpp
    ! Fixed: codepage dependent GETs to present proper alphabets. 
       This is achieved by replacing QString::toAscii() call with QString::toUtf8().

2013-04-26 12:13 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r215)
  * hbqt/qtgui/hbqt_init.cpp
    ! Fixed: Qt version dependent QMainWindow's header location.

2013-04-25 12:02 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r214)
  * hbide/environ.prg
    ! Fixed: building EnvVar $PATH on *nixes. It was breaking "Build Project"
       process inside HbIDE in certain situations. Discovered and fixed 
       by Alain, thanks.

2013-04-24 13:43 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r213)
  * hbide/hbide_v.ch
    * Version bump.

  - hbqt/gtqtc/*
    - Deleted: GTQTC from QtContribs.
       An extremely powerful version has been committed by Przemek in 
       Harbour GIT under contrib/gtqtc. Thank you Przemek for this 
       all-the-useful contribution. This fills a wide-gap in using 
       Harbour platform-independent without even changing the setup.
       Plus it will provide a solid initiative for console mode 
       programmers to turn to pure GUI and having a edge of mixing
       GT and GUI screens. New GTQTC has the power to be run in MT 
       mode flawlessly, a powerful offering.

  * hbqt/qtgui/hbqt_init.cpp
    + Added: Przemek supplied functions to retrieve GTQTC window 
       and its drawingarea. These are useful to embed console inside 
       a GUI form. Look into HbIDE code console.prg how it can be 
       achieved.

  * hbqt/tests/browqt.prg
    % Minor.

  * hbqt/tests/demoqtc.prg
    % Modified to honor newly committed GTQTC. It has MT functionality
       just like in GTWVT ot GTWVG.

  - hbqt/tests/wvtqt.hbp
  - hbqt/tests/wvtqt.prg
    - Removed, no longer necessary GTWVT console based HbQt extention.
       This is superceded by demoqtc.prg.

  * hbxbp/crt.prg
    * Changed to retrieve GtQtc console from functions provided by Przemek.

  * qtcontribs.hbp
    - Removed: GTQTC build call.

2013-04-23 15:10 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r212)
  * hbide/sources.prg
    ! Fixed: annoying alert "Source has been modified by some external..."
       when, a project is built whole source has been modified and not 
       saved before compilation process is started. 
       Pushed up by Maurizio.

2013-04-22 17:32 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r211)
  + hbqt/tests/demoqtc.prg
    + Added: demonstration appln based on GTQTC having functionality of 
       firing HbQt widget in modal dialog plus GT specific actions.
       It was present in slightly diefferent form when inside Harbour 
       SVN and was removed by Viktor.

2013-04-19 13:56 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r210)
  * hbdbu/dbu.prg
    * Version bump.
    % Reverting back HbDBU icon to Harbour instead of Cube.

  * hbdbu/hbdbu.hbp
    + Added: switch to tie Harbour icon to the executable

  * hbdbu/hbdbu.ico
    + Harbour icon.

  * hbide/hbide_v.ch
    * Version bump.

2013-04-19 13:09 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r209)
  * hbqt/tests/demoqt.prg
    ! Fixed: <Exit> main menu option and ESCaping the main window.

2013-04-18 19:14 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r208)
  * hbqtwidgets/hbqtbrowse.prg
  * hbqtwidgets/hbqtdbu.prg
    % Changed: the argument order of AChoice().

  * hbqtwidgets/hbtoqt.ch
    + Added: #xtranslate AChoice(     =>  HbQtAChoice(
             #xtranslate DispOutAt(   =>  HbQtDispOutAt(
             #xtranslate MaxRow(      =>  HbQtMaxRow(
             #xtranslate MaxCol(      =>  HbQtMaxCol(

  * hbqtwidgets/hbqtstd.ch
    + Added: constants _QSAY_* to identify SayList array elements.

  * hbqtwidgets/getlist.prg
    + Implemented: tying the underlying window over which GETs are 
       spread to its GetList Object.
    
    + Implemented: tying of SayList to GetList object in question.
       It is used to reuse SAYs in DispOutAt() calls.

    + Added: __hbqtGetsActiveWindow() to retrieve the current window.
       This function is used to determine DispOutAt(), MaxRow(), MaxCol()
       calls return values.
  
  * hbqtwidgets/alert.prg
    % Changed: order of additional arguments to HbQtAChoice().
       HbQtAChoice( ..., [<cTitle>], [<oParent>] )
         =>
       HbQtAChoice( ..., [<oParent>], [<cTitle>] )

    + Implemented: near to Clipper AChoice() respecting most of 
       the arguments except "cUserFunc".

    + Implemented: Clipper compatible DispOutAt() function as:
       HbQtDispOutAt( <nRow>, <nCol>, <cExp>, [<cColor>], [<oWnd>] )
       [<oWnd>] defaults to __hbqtGetsActiveWindow().

    + Implemented: GT compatible MaxRow() function as:
       HbQtMaxRow( [<oWnd>] )
       [<oWnd>] defaults to __hbqtGetsActiveWindow()

    + Implemented: GT compatible MaxCol() function as:
       HbQtMaxCol( [<oWnd>] )
       [<oWnd>] defaults to __hbqtGetsActiveWindow()

    ; The above functions are only relevent if called from within 
      WHEN or VALID clauses for the purpose of determining the 
      affected window. This implementation nears the porting efforts.

    ; DispOutAt( nRow, nCol, ... ) exploits existing SAY object if one 
       exists at <nRow>,<nCol> created via @ nRow,nCol QSAY ... mechanism.
       If not, then a new object is created at the specified coordinates,
       which in turn is added to the SayList of respective GetList object.

       For all practical purposes, you can reuse existing SAYs.

  * hbqtwidgets/getsys.prg
    + Added: code to publish current GETs window to __hbqtGetsActiveWindow()

  * hbqtwidgets/misc.prg
    + Added: __hbqtGetXYFromRowColumn( oWnd, nRow, nCol, oFont ) 
               => { nX, nY, nColWidth, nRowHeight }
       It is similar to __hbqtGetGlobalXYFromRowColumn() but returns 
       the coordinates calculated from <oWnd>'s origins.

    + Implemented: a handy function to obtain a dialog on top of existing 
       window as:
       __hbqtGetADialogOnTopOf( oParent, nTop, nLeft, nBottom, nRight, cTitle, oFont, lResizable )
       The function in turn is used elsewhere in HbQtWidgets code.

  * hbqtwidgets/tests/pureclip.prg
    + Added: code to demonstrate above concepts.

2013-04-16 12:29 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r207)
  * hbqtwidgets/misc.prg
    % Changed: __hbqtGetXYFromRowColumn() => __hbqtGetGlobalXYFromRowColumn()

  * hbqtwidgets/getlist.prg
    % Function name change.

  * hbqtwidgets/hbqtbrowse.prg
    ! Fixed: positioning of browser column per horizontal slider movement.
       Reported by Zoran.
    ! Fixed: calling the :verticalMovementBlock() on vertical slider movement.
        Again reported by Zoran.

2013-04-15 18:24 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r206)
  * hbqtwidgets/hbqtbrowse.prg
    ! Fixed: to honor PICTURE sent to :cellEdit( <cPicture>,... ) call.

  * hbqtwidgets/getlist.prg
    ! Fixed: many artifacts.

  * hbqtwidgets/getsys.prg
    ! Fixed: many buffer management artifacts.

  * hbqtwidgets/tests/getsinfo.prg
    + Added: more variable types and pictures to test differences with 
       Clipper GET system.

  * hbqtwidgets/tests/browdb.prg
    ! Fixed: editing of a field was not reflecting in column.
       :refreshCurrent() was missing.

  * hbqtwidgets/tests/pureclip.prg
  * hbqtwidgets/tests/validator.prg
    % Added: PICTURE clauses with different parameters to demonstrate 
       Clipper functionality.

2013-04-14 15:40 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r205)
  * hbqtwidgets/getsys.prg
    ! Fixed: various instance variables of GET object, e.g., :buffer(), :updateBuffer(), etc.
        Reported by Zoran Sibinovic with test code.
       
  + hbqtwidgets/tests/getsinfo.prg
    + Added: test code to determine various attributes of GETs based on picture 
        functions and templates. Test code is provided by Nenad ( as per Zoran's message ).
        I have just refined it to be usable with pure Harbour.
        For HbQt, compile it as : hbmk2 getsinfo -d__QT__ -run -inc.
        For Clipper, compile it as ( and in placing it in harbour/tests ) : hbmk2 getsingo -run -inc.
          
    ; Please report back if any attribute is still misbehaving.

2013-04-11 19:02 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r204)
  * hbide/edit.prg
    % Minor.

  * hbqt/tests/draganddrop.prg
    % Changed: source with SVN Id and some more tweaks, forwarded by Luigi.

  * hbqtwidgets/hbqtwidgets.hbp
    + Added: misc.prg.
   
  + hbqtwidgets/misc.prg
    % Separated: miscellaneous functions spread in HbQtWidgets sources.
    + Added: few more utility functions in a hope that end-user will also 
       be needing them at some point of development.

  * hbqtwidgets/hbqtbrowse.prg
    % Simplified: code to take use of HbQtWidgets Public API.

  * hbqtwidgets/getsys.prg
    ! Fixed: ACCESS oGET:changed
             ACCESS oGET:picture
             ACCESS oGET:unTransform()
                Loosely tested, please shout if not proper.

  * hbqtwidgets/hbqtstd.ch
    + Added: another ATTRIBUTE - _QGET_ATTRB_ATROWCOLUMNONTOPOF
             An Array representing { oWnd, nRow, nCol, lMovable }.
             Used to Fetch another GETs on top of a GETs window.
             ( Read Below )

  * hbqtwidgets/getlist.prg
    + Implemented: To fetch another GETs on top of a GETs window passing
       Window, Row, Column, IfMovable coordinates as part of the 
       QREAD ... ATTRIBUTES clause. This attribute can be assigned to 
       ATTRIBUTES array as 
         aAttrbs := {}
         AAdd( aAttrbs, { ... } )
         AAdd( aAttrbs, { _QGET_ATTRB_ATROWCOLUMNONTOPOF, 
                              { <oWnd>, <nRow>, <nCol>, [<lIfMOvable>] } } )
       If passed this attribute, a modal dialog will be position on the 
       XY position ascertained from <nRow>,<nCol> of <oWnd> based on 
       the font set on <oWnd> if that is of type fixedPitch(), otherwise
       via font of current GETs font. If <lIfMovable> is passed as TRUE,
       then dialog will be decorated with a TitleBar but without any 
       other buttons, just to facilitate appln user to move it around if 
       there is a need, otherwise, dialog will be without a titlebar 
       and hence will not be movable.

       This implementation enables us to overcome yet another porting issue
       where one has to write a lot of code to achieve similar functionality.

  * hbqtwidgets/tests/pureclip.prg
    + Added: code to demonstrate how another GET window can be initiated 
        from within VALID/WHEN clauses forming extention to existing 
        GETs.

2013-04-09 02:21 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r203)
   + hbqt/tests/draganddrop.prg
     + Added: a demo appln which demonstrate how rows can be moved/copied
        from one table to another identical table. 

        The appln is contributed by Luigi Ferraris, thanks.

2013-04-08 15:34 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r202)
  * ChangeLog.txt 
    ! Rewote previous entry # 201.
  
  * hbide/edit.prg
  * hbide/misc.prg
    + Implemented: recognition of text in strings and comments and then 
       deactivate code specific operations on keywords, etc., taking 
       it as plain text.

       Was a long-overdue feature but did not got attention until now
       when Massimo pointed it out recently.

2013-04-08 00:04 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r201)
  * hbqt/qtgui/qth/QAbstractItemView.qth
    + Added: Qt::DropAction defaultDropAction () const
             void setDefaultDropAction ( Qt::DropAction dropAction )
       For Qt 4.6 and above. Pointed out by Luigi.

2013-04-05 12:24 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r200)
  * hbqtwidgets/hbqtbrowse.prg
    - Removed: evaluation of column's block with edited value in METHOD editCell(...). 
       When I had implemented it like that, was double-minded since begining.
       I could not assert the real time use case scenario how it should 
       behave. But recent clarification by Zoran has made my mind clear 
       about it. In fact, it should be the responsibility of appln what 
       it wants to do with ediited value, not that of library.

2013-04-04 17:45 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r199)
  * hbqtwidgets/getlist.prg
  * hbqtwidgets/getsys.prg
    + Implemented: GET PICTURE FUNCTION contain "K".
       Q 10,10 GET cText PICTURE "@!K"
       Now only those GETs will be presented having all text selected 
       which will contain "K" in its picture function.

       The feature was missing since begining which get nailed today.

  * hbqtwidgets/tests/pureclip.prg
    + Added: code to demonstrate "@K" usage.

2013-04-03 17:22 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r198)
  * hbide/hbide_v.ch
    * Version bump.

2013-04-03 16:04 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r197)
  * hbqtwidgets/hbqtstd.ch
    + QREAD ... ATTRIBUTES <aAttrbs>
    + #define _QSET_EDITSPADDING
    + #command QSET EDITSPADDING [TO] <nPadds>
    
  * hbqtwidgets/getlist.prg
    + Added: ATTRIBUTES clause to QREAD : QREAD ... ATTRIBUTES <aAttrbs>
       <aAttrbs> is a two dimentional array. First element will be one 
       of the following constants and the second its value:

          _QGET_ATTRB_SETMODE    { 25, 80 }  Defaults to NIL
          _QGET_ATTRB_RESIZABLE  .T. | .F.   Defaults to .T.

       _QGET_ATTRB_SETMODE will instruct the GET engine to resize the 
       window per rows and columns as would a normal GT window does.

       _QGET_ATTRB_RESIZABLE will allow you to fine tune user behavior,
       as to if he/she can resize the form window.

       These two attributes are applied only in case if QREAD is  
       called __WITHOUT__ <GetParent>, i.e., like Clipper GT.

  * hbqtwidgets/hbqtbrowse.prg
    + Implemented: a title-bar-less modal dialog to host a HbQtBrowse()
       object mainly usable for lookup browsers. This has been achieved for 
       Clipper like data-entry windows respecting 
       <nTop>,<nLeft>,<nBottom>,<nRight> coordinates of TBrowse(). 
       
       You only need to pass <lOnTop> == TRUE to activate it as below:

          oBrowse := HbQtBrowseNew( nTop, nLeft, nBottom, nRight, oParent, oFont, lOnTop )
            =>
          oBrowse := HbQtBrowseNew( 10, 10, 20, 70, oDataEntryWindow, NIL, .T. )
          // Configure the browse, add columns, define various blocks, etc.
          oBrowse:execute()

       Terminating the browser will be initiated from oBrowse:navigationBlock() 
       depending upon the application's needs as: 
          IF nKey == K_ESC
             oBrowse:terminate()
          ELSEIF nKey == K_ENTER
             // Retieve the current record's info to be used elsewhere.
             oBrowse:terminate()
          ELSE ...

       In real-time scenario, like in Clipper, the complete sequence will be like:

          FUNCTION Main()

             SetKey( K_F2, {|| MySelectionBrowser() } )
             @ 12, 10 SAY "This" GET cText
             @ 13, 10 SAY "That" GET cOtherText

             READ
             SetKey( K_F2, NIL )

             RETURN NIL 

          FUNCTION MySelectionBrowser()
             LOCAL oBrowse

             oBrowse := HbQtBrowseNew( 10, 10, 20, 70, GetActive():parent(), NIL, .T. )
             WITH OBJECT oBrowse
                // other blocks
                :navigationBlock := {|...| NavigateMe( ... ) }
             ENDWITH 

             oBrowse:execute()

             RETURN NIL

          FUNCTION NavigateMe( nKey, , oBrowse )
            
             SWITCH nKey
             CASE K_ESC   ; oBrowse:terminate() ; RETURN .T.
             CASE K_ENTER ; // Pull Record Info */ ; oBrowse:terminate() ; RETURN .T.
             CASE ...
             ENDSWITCH

             RETURN .F.
 
  * hbqtwidgets/tests/pureclip.prg
    + Added: code to demonstrate how a lookup browser can be implemented and used.
       Press F2 to activate lookup browser. If you will be inside first get, 
       pressing ENTER on the lookup browser will put the value of second field 
       of browser in the GET.

  * hbqtwidgets/tests/validator.prg
    + Added: code to demonstrate the use of QREAD ... ATTRIBUTES

2013-03-31 03:54 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r196)
  * hbqtwidgets/hbqtbrowse.prg
    + Implemented: METHOD searchExBlock( bBlock )
                   METHOD searchEx( cValue )
       When activated, a blue colored label will show up at the bottom 
       of the browser displaying search string in white.

  * hbqtwidgets/hbqtdbu.prg
    + Added: METHOD indexKeyType() -> cType

  * hbqtwidgets/tests/browdb.prg
    + Added code to demoonstrate how oHbQtBrowse:searchExBlock() works.

  * hbdbu/dbu.prg
    + Implemented: searching feature in HbDBU as per above implementation.
       Now, if an index is active on the browser, then pressing any printable
       key will start an incremental search, pressing ENTER will terminate 
       search, pressing K_BS will allow to alter the search string. 

       This implementation is a non-blocking operation, means, all other 
       features of the browser are still active while search is being 
       performed. This facilitates to develop look-up browsers without which 
       we cannot imagine to port our Clipper code.

    NEXT: HbQtBrowse to be encapsulated in a title-bar less modal dialog 
          to present a truely look-up browsers taking use of the above 
          search implementation, stay tuned.

2013-03-25 13:27 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r195)
  * hbqt/hbmk2_qt.hb
    ! Fixed: to honor a newly introduced construct in .ui to .cpp conversion.
    % Optimized: the other code, a by-process of above fix.

2013-03-23 19:08 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r194)
  * hbide/projmanager.prg
    + Implemented: support for drag-and-drop of source files onto 
       <Project Properties> dialog.

2013-03-23 18:28 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r193)
  * hbxbp/filedialog.prg
    ! A small omission corrected. Now default filename is shown in the 
       <File:> editi control as selected.

  * hbide/selectsources.ui
    + Added: few more controls.

  * hbide/misc.prg
  * hbide/projmanager.prg
    + Refined: the Project Builder concept. Now no file dialog is opened 
       to fetch the .hbp filename. Instead, <Select Sources> dialog 
       shows up <.hbp> edit control and an icon next to it to select 
       a folder. A default project file name starting with "prj" and 
       ending with next number of "prjnnnnn.hbp" is shown in last 
       explored working folder, like, <c:\myprojects\prj00001.hbp>.
       Next time if a project is created in same folder, 
       <c:\myprojects\prj00002.hbp> will show up if prj00001.hbp is 
       still lying there.

       The above feature was pointed out by Massimo.

2013-03-22 18:02 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r192)
  * hbide/projectpropertiesex.ui
  + hbide/selectsources.ui
  * hbide/hbide.hbp
    + Added: selectsources.ui

  * hbide/misc.prg
  * hbide/projmanager.prg
    + Implemented: restructured and re-thought of Project builder.

       1. The <Project Properties> dialog now contain only single view,
           all contained inside there and works as before except for 
           interface.

       2. <Create a Project> action opens a file save dialog where you 
           need to provide a .hbp name, which is tested for duplicacy 
           and disregarded if exists a project with same name.
           Before this step was asking for the folder location only.

       3. A modal dialog is opened containing all the sources contained 
           in the folder where above project resides. Sources are ordered 
           first by extention and next by name. By default all sources 
           are shown as checked, exception being .hbp, .hbc, .hbm.

       4. Interface provides to <Select/Unselect All>, <Select By Ext>, 
           and <UnSelect by Ext> where you can manage which sources 
           should makeup to the project.

       5. Interface also contain elements to provide few hbmk2 specifc 
           switches plus compiler specific switches. I have not gone 
           to unnecessary details, only switches which are frequently 
           used are vailable on the interface. This interface is only 
           available for a NEW project. Once saved, and re-called 
           for changes, the old dialog with changes told in #1 above 
           will be effective.

       6. Once satisfied with the selections and switches, click <OK>.
           The <Projects Properties> Dialog will show up displaying 
           actual .hbp contents. Still project is not saved. It may 
           be modified as per your additional requirements as you 
           would do in a .hbp just like in a text-editor, i.e., adding 
           more switches and/or sources from other folders, etc.
         
       7. Click <Save & Exit> or <Save> to save the project on disk.
           Such saved project can directly be submitted to hbmk2 from 
           comman-line as well. The files and switches are organized 
           in meaningful sections.

    ; NOTE: This implementation has made <Project> setup and link 
            process a breeze. Give it a try, you will not be disappointed.

    ; NEXT: drag-drop support of sources in <Project Properties> dialog.

2013-03-21 13:45 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r191)
  * hbqtwidgets/getsys.prg
    + Implemented: @ ... QGET ... COMBOBOX ... to ::assign() the selected 
       prompt activated via mouse. Activating a conbobox get via mouse 
       does not post validates the selection, simply assigns. Before it was 
       done via presseing ENTER only which also post validates.

2013-03-19 19:02 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r190)
  * hbqt/qtgui/hbqt_hbqplaintextedit.cpp
    + Added: WITH OBJECT/ENDWITH pair highlighting.

  * hbide/actions.prg
  * hbide/main.prg
  * hbide/projmanager.prg
    % Reorganized: <Projects> option on <Main Menu>. All prompts are 
       fully functional. It adds those prompts also which were available 
       with right-click context menuu on <Projects> node of projects tree.

  * hbide/edit.prg
  * hbide/editor.prg
    % Rationalized: many artifacts.
    % Speed-up many operations by building static hash of keywords and 
       applying hb_hCaseMatch( , .f. ).
    - Deleted: transfered to C++ code residuals, was creating confusion.

  * hbide/saveload.prg
    ! Fixed: a nastry bug where RTE was generated when <Remove Project> 
       option was activated after <Close All Files> option and HbIDE 
       was containing more then one panel. Reported by Francesco S. Giudice.

  ; NEXT: rationalization of project creation.

2013-03-15 18:45 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r189)
  * hbqtwidgets/hbqtbrowse.prg
    ! Fixed: a wrong type checking which was preveting user defined 
       context-menu block.

  + hbdbu/resources/hbdbu.htm
    + Added: HbDBU documentation in .html format. 
       This documentation is made available by clicking on <Help> icon 
       on the toolbar.

  + hbdbu/resources/help.png
    + New image for <Help> action on the HbDBU's toolbar.
  * hbdbu/dbu.qrc
    + Added help.png and hbdbu.htm.

  * hbdbu/dbu.ui
    + Added: one more page to stacked widget for a futuristic feature.

  * hbdbu/dbu.prg
    + Implemented: help documentation via an icon <Help> on the HbDBU's toolbar.
       The documentation content is a work-in-progress as I am really poor
       in explaining an application. Anyway I will try my level best.
       If possible, you can send some text explaining any part of the HbDBU.

    % Changed: context menu options on a browser instance.
       It is now rationale will all important actions a user is ought to 
       perform frequently. Speak-out if more actions should go there.

       It was a pending feature till now, but Massimo just pushed it up.

    % Changed a little the behavior of invoking HbDBU.
       If a .dbf is supplied on the command-line and no .dbu is supplied,
       then no environment will be read and saved by default. Anyhow,  
       environment can be saved via <Save Environment> icon.

2013-03-14 16:14 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r188)
  * hbqtwidgets/hbqtdbu.prg
    + Made some methods and functions public.
    + Added: couple of more methods, internal usage.

  + hbdbu/resources/rest-env.png
  + hbdbu/resources/save-env.png
  * hbdbu/dbu.qrc
    + Added: two more images for HbDBU's toolbar.

  * hbdbu/dbu.prg
    + Implemented: command-line parameters extended to accept the environment
       file ( .dbu ) to restore settings from.

    + Implemented: command-line parameters to accept default RDD to use 
       for next .dbf files provided on the command-line.

    + Implemented: to memorize last RDD to make it default for next run.

    + Added: <Save Environment> icon on the toolbar.
       Activating it will open file save dialog asking for a .dbu, and if 
       provided correctly, including the .dbu extention, will save the 
       current environment into it, which can be opened and/or merged with 
       your current session on will.

    + Added: <Merge Environment> icon on the toolbar.
       When invoked will ask for a .dbu in file open dialog. The environment 
       contained therein will be merged into your existing environment.

    EXAMPLES:
       hbdbu.exe e:\dev_exes\ntx.dbu dbfntx e:\harbour\tests\test.dbf
         will open the test.dbf with DBFNTX driver.

       hbdbu.exe e:\dev_exes\ntx.dbu dbfntx e:\harbour\tests\test.dbf \
                                     dbfcdx e:\harbour\tests\test.dbf
         will open the test.dbf with DBFNTX drive and 2nd copy of test.dbf 
         with DBFCDX rdd.

       hbdbu.exe e:\envs\mylastenv.dbu 
         will open mylastenv.dbu contained view.

       hbdbu.exe e:\envs\mylastenv.dbu DBFCDX e:\harbour\tests\test.dbf
         will open the view in mylastenv.dbu and also test.dbf with DBFCDX rdd.

    NOTE: this implementation allows you to save and execute n number of views.
          Also this empowers you to link .dbf and .dbu's with HbDBU via explorer.

2013-03-13 16:08 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r187)
  * hbdbu/dbu.prg
  * hbide/hbide_v.ch
    % Revision bump.

2013-03-13 15:47 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r186)
  + hbqtwidgets/menues.prg
  + hbqtwidgets/statusbar.prg
  + hbqtwidgets/treeview.prg
    + Added: Classes from HbXBP but without any framework. These must be 
       usable with any framework. Work-in-progress.

  + hbqtwidgets/alert.prg
  + hbqtwidgets/getlist.prg
  + hbqtwidgets/getsys.prg
  + hbqtwidgets/toolbar.prg

  - hbqtwidgets/hbqtalert.prg
  - hbqtwidgets/hbqttoolbar.prg
  - hbqtwidgets/hbqtgetlist.prg
  - hbqtwidgets/hbqtgetsys.prg
    % Renamed few sources to portray contents presisely.

  * hbqtwidgets/hbqtwidgets.hbp
    % Deleted, Added changed/new sources.

  * hbqtwidgets/hbqtbrowse.prg
    % Overloaded few more methods of TBrowse to eliminate the unnecessary 
       GT specific display calls and columns specific metrix calculations.
       This must speed-up HbQtBrowse():refreshAll() method.

  * hbqtwidgets/hbqtdbu.prg
    % Minor.

2013-03-13 15:28 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r185)
  * hbide/findreplace.prg
    ! Fixed: not to consider lines starting with 
       METHOD, ACCESS, ASSIGN, MESSAGE in CLASS definitions.

    % Refined: Functions Map layout. 
       Now it shows out like this, publishing the call with arguments:

       Alert()(10)
            E:\harbour\addons\hbdbu\dbu.prg
            (  282) exit                  : Alert( "Exit HbDBU ?", { "Yes", "No" } )
            (  329) setDatabaseParams     : Alert( "Could not Connect to Cache Server" )
            (  429) saveMyTable           : Alert( { cTable + ", already exists!", "DO you want to overwrite it ?" }, { "No", "Yes" }, , , "WARNING : Table could be Overwritten" )
            (  448) saveMyTable           : Alert( cTable + " : has been created successfully!" )

       It helps to locate certain instances of wrongly passed arguments.

2013-03-12 15:10 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r184)
  + hbide/resources/map.png
  * hbide/hbide.qrc
    + Added: map.png. 

  + hbide/functionsmap.ui
  * hbide/hbide.hbp
    + Added: functionsmap.ui

  * hbide/main.prg
    + Implemented: Printing option to <Show Code Fragment> window 
       which can be activated via context menu of <Functions List>.
       Press CTRL+P when <Show Code Fragment> dialog is in focus.
       A Print Preview dialog will be opened containing the printable 
       pages which, in turn, can be printed as per choice.

  * hbide/edit.prg
  * hbide/editor.prg
    + Implemented: printing of selected text.
       How It Works: 
       ============
        1. Select the text by mouse or keyboard.
        2. Right-Click to activate context menu.
        3. Select <Show Selected Text>
        4. A stay-on-top code-fragment window will be opened 
            containing the selected text.
        5. Press CTRL+P to activate print preview dialog.

  * hbide/actions.prg
  * hbide/docks.prg
  * hbide/misc.prg
  * hbide/object.prg
    + Added: components to activate and manipulate feature 
             IdeFunctionsMap() (Read Below).
             Will be referred as <Functions Map> in subsequent context.

  * hbide/findreplace.prg
    + Implemented: CLASS IdeFunctionsMap()
       <Functions Map> is a tool to view/print the functions usage 
       given a .hbp project or a combinations of .hbp projects.

       It obtains a map of functions as:
         1. Where they are defined, with arguments, if possible.
         2. And from Where they are called, with source/function/line numbers.

       It empowers a developer to optimize his/her source code, 
       to isolate functions which are never called, to determine 
       why a function is called so many times in a single function 
       or source, etc. Developers imagination is the limit as to 
       how this tool can be used to his advantage.

       How It Works:
       ============
        1. Click on <Functions Map> icon on the main toolbar.
            Alternatively click <Main Menu><View><Docking Widgets><Functions Map>.
        2. A docking widget will appear on the right docking area.
        3. On the top, a selectable list of all projects visible in 
            <Projects Tree> will appear.
        4. Select the projects for which to obtain Funtions Map.
        5. Click on <Create> push-button visible right under projects 
            selection list.
        6. The stat will start appearing in the lower edit control.
        7. You can click on <Stop> push button anytime during the process.
        8. After all source files will be processed, real-time map entries
            will start appearing in the editor.
        9. Have patient, it may take some time, depending upon the project(s)
            size in terms of number of lines processed.
        10.Once the map is complete, scrolling entries will stop to appear, 
            navigate the editor. Right-click context menu is avialble for 
            further options.
        11.Double-clicking on a entry will open the relevant source, 
            positioning the cursor on relevant portion of the line.

       The map is divided in two parts.
       1st part shows the functions which have been called at least once.
       2nd part shows only those functions which have never been called.
       It make it easier to investigate sources.

       These assumptions are relevant to this process:

       1. Functions called in macros do not makeup to the map.
       2. Function call is determined with this regular expression:
            "\b[A-Za-z0-9_]+ ?(?=\()"
          ( Please shout if it is wrong ).
       3. Commands are not parsed to functions and hence do not make up in map.
       4. Only CLASS declation is considered as function, methods are not 
           taken into account.
       5. No seperation id made for STATIC and PUBLIC functions, both 
           make up to the map.
       6. Multi-line, single-line, in-line ( only at the end with // and && ) remarks
           are left untouched.

       Layout of Mapped Entries:
       ========================
       Function contained the project(s) sources ( 1st Section ):

       DecryptPass( cStr, nMode )(6)                          Prototype, times called.
       (4)  E:\Laptop-Vouch32\dev_sources\qdbu\dbumisc.prg    Line#, Source Name             CLICKABLE
            E:\harbour\addons\hbdbu\dbu.prg                   Called-in Source
            (  362) openConnections( aConxns )                Line#, Function called from    CLICKABLE
            (  362) openConnections( aConxns )                .
            (  363) openConnections( aConxns )                .
            (  363) openConnections( aConxns )                .
            (  368) openConnections( aConxns )                .
            (  369) openConnections( aConxns )                .
 
       Function not contained in the sources but called ( 1st Section ):

       DbuMGR()(1)                                            Function w/out prototype, times called
            E:\harbour\addons\hbdbu\dbu.prg                   Called-in Source
            (   95) Main( ... )                               Line#, Function called from    CLICKABLE

       Function contained in the source(s) but not called ( 2nd Section ):

       Main( ... )                                            Prototype
       (85)  E:\harbour\addons\hbdbu\dbu.prg                  Line#, Source Name


       How the Feature was conceived:
       =============================
       The other day, my manager asked me if we have some utility which can be used 
       to isolate those functions which are not being called any-more. The idea was 
       to optimize the huge application developed constantly in-house since 23+ years,
       from Clipper to (x)Harbour. I posted the request on Harbour-devep list. Single
       reply from Tamas was difficult to use plus was not satisfying what I wanted.
       So, I thought, why not HbIDE should have this feature, and result is satisfying. 

       Your opinion and suggestions will matter.

2013-03-12 15:02 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)(r183)
  * hbqtwidgets/hbqtbrowse.prg
    + Implemented: METHOD activateIndexMenu()
                   METHOD activateColumnsMenu()
       As the name implies, calling these methods will activate the 
       respective menu options on the HbQtBrowserr toolbar.

  * hbdbu/dbu.prg
    + Added: code to exploit above two methods.     

2013-03-07 19:03 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/resources/copy.png
  * hbqtwidgets/hbqtwidgets.qrc
    + Added: another image.

  * hbqtwidgets/hbqtbrowse.prg
    + Implemented: selection of multiple rows and columns by dragging
       the mouse and then copy the selection on clipboard. A new 
       icon "Copy Clipboard" is provided on the HbQtBrowse:toolbar 
       to activate copy operation after selection. Alternatively,
       ALT+C key can be used to copy selection.

       The records are separated with hb_eol().
       The columns are separated by K_TAB.
       MS Excel, Notepad, HbIDE pastes this copy properly.

       The first row contains the column headers, so no need to 
       remember the field names manually.

       NOTE: it has not been possible to scroll past the last row visible
             in the browser window for selection process. Columns 
             can be scrolled till end.

  * hbqtwidgets/hbqtdbu.prg
    + Implemented: to open next browser at position where last browser
       was closed, if any. Only position is relevant, not size.    

2013-03-01 19:26 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/resources/cube-2.png
  * hbqtwidgets/hbqtwidgets.qrc
    + Added: another image to represent HbDBU.

  * hbqtwidgets/hbqtbrowse.prg
    % Changed: the inactive btowser row/column selection background color.
       Now it distinguishly separates active and inactive windows.

  * hbqtwidgets/hbqtdbu.prg
    % Minor.

  * hbqtwidgets/dbucreate.prg
    ! Fixed: where <Connections> combo-box was not being populated 
       with the change in <RDD Driver> drop-down pick list on 
       <Create a Table> dialog.

  * hbdbu/dbu.prg
    + Added code to demonstrate how oDbu:saveTableBlock() can be exploited.
    % Changed: HbDBU's task-bar icon.

2013-02-27 15:55 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/resources/table-add.png
  * hbqtwidgets/hbqtwidgets.qrc
    + Added one more image.

  + hbqtwidgets/dbucreate.prg
  * hbqtwidgets/hbqtwidgets.hbp
    + Added dbucreate.prg

  * hbqtwidgets/hbqtbrowse.prg
  * hbqtwidgets/hbqtdbu.prg
    + Implemented: <Create a Table> action which can be activated via 
       an icon on the HbDBU's top toolbar. A modeless, stay-on-top window 
       is displayed. Window is devided into two sections. Top one hosts an 
       array browser to fetch table structure. Lower one host another array
       browser to fetch index tags and expression.

       These are the actions available for editing, etc.

       K_F1        to view these instructions
       
       K_ENTER     to start editing

       K_CTRL_INS  to insert a blank row
       K_CTRL_DEL  to delete current row
       K_CTRL_UP   to move current row up
       K_CTRL_DOWN to move current row down

       K_CTRL_V    to paste copied structure ( from Structure pane at the right of HbDBU )

       K_CTRL_P    to print the structure info

       initiating editing will always position the cursor on "Name" field and then will 
       continue circulatory as Name->Type->Len->Dec->NextRow->... A new row will 
       automatically appened at the bottom if "Dec" field is reached and current 
       row is the last one. To leave the editing mode, just press ESC. If "Name"
       field will be blank, the row will be deleted, browser will be refreshed.
       "Len" and "Dec" fields are auto assigned for (L)ogical and (D)ate fields.

       If required you can paste entire structure of an opened table. Click on the 
       browser window whose structure is nneded to be pasted, click on <Structure>
       browser on the right-most pane, press CTRL+C, resturn back to <Create a Table>
       window, press CTRL+V, and see structure pasted here. The existing structure 
       will be replaced so be carefull.

       Window is modeless so it is possible to start creating tables in multiple
       windows simultaneously.

       I am familiar with only DBFCDX and ADS (CDX) file types only. Let me know if 
       anything is missing. 

       This implementation also demnstrate an example how a parent/child relational 
       form can be developed, like an invoice. This code has all the constructs 
       in-place to achieve that, so strech your imagination in this direction.
       The complete code is contained in dbucreate.prg only, study it.

  * hbdbu/dbu.prg
    % Version bump.

2013-02-27 15:48 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/sources.prg
    ! Fixed: where QFileSystemWatcher() was being set on a source yet 
       not created. Reported by Alain and detected on Linux.

2013-02-25 15:37 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbdbu/dbu.prg
  * hbqtwidgets/hbqtdbu.prg
    + Implemented: to open table(s) passded on command-line.
       C:\>HbDBU.exe c:\harbour\tests\test.dbf
       Multiple files can be designated separated by a space.
       Filename must not contain any space.

       Feature requested by Massimo.

2013-02-25 14:50 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbide/resources/hbide-2013.png
  * hbide/hbide.qrc
  * hbide/main.prg
    + Added: new HbIDE splash screen with correct copyright years.
       Was a long neglected necessity which is flared up by Massimo.

  + hbqtwidgets/resources/hbdbu-2013.png
  * hbqtwidgets/hbqtwidgets.qrc
  * hbdbu/dbu.prg
    + Added: new look HbDBU splash screen.

2013-02-25 13:16 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/sources.prg
    + Implemented: protocol to keep watch on the sopened source 
       and report if it is changed from out-side of current HbIDE 
       instance and then asks to reload or not.

       Pointer sent by Massimo, thanks.

       Not heavily tested, so your feedback will be valuable.

2013-02-22 19:12 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtstd.ch
    + Added: clause @ ... QSAY ... PROPERTIES <prop>
    + Added: clause @ ... QSAY ... PROPERTIES <prop> QGET ...

  * hbqtwidgets/hbqtgetlist.prg
    + Implemented: PROPERTIES clause of @ ... QSAY PROPERTIES ... [ QGET ... ]
       The block is evaluated with <oQLabel>,<{nX,nY,nW,nH}>.
       User can then change the properrties of oQLabel as he/she 
       deem appropriate to their needs. 

       CAUTION: do not mess-up with Windows look and feel. A wrong 
                usage may spoil overall screen design.

  * hbqtwidgets/hbqtgetsys.prg
    + Implemented: num-pad placed ENTER key which now behaves like 
        standard ENTER key is pressed. Pointed-out by Alain.

  * hbqtwidgets/tests/validator.prg
    + Added: code to demonstrate the use of @ ... QSAY ... PROPERTIES clause.

2013-02-22 18:57 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_hbqplaintextedit.cpp
    + Added: detection of Shift+Delete which must behave like Ctrl+X.

  * hbide/themes.prg
    + Added: some Harbour keywords to colorize per specs.

  * hbide/edit.prg
  * hbide/editor.prg
    + Implemented: ::nextEditor() and ::previousEditor() methods.
       Assigned: Alt+Right Arrow to ::nextEditor()
                 Alt+Left Arrow to ::previousEditor()
         The assigment is permanent. You can assign these methods 
         to other keys but these keys cannot be overriden.

         The methods navigate right or left editing instance in a 
         cirriculatory manner, means jumping to first or last editing 
         tab depending upon the arrow hit.

         This enables to you navigate between tabs without leaving the 
         keyboard. Till now you had to click on a tab to activate 
         contained editing instance.

         The pointer was received from Francesco Saverio Giudice.

  * hbide/shortcuts.prg
    + Added: above two methods to be callable via user macros.

2013-02-22 09:15 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    % Version Bump.

2013-02-18 14:13 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtcore/hbqt_misc.prg
    + Implemented: in error handler, to find a child of the name 
       representing the error message. Now, manually built dialogs 
       have the same feature as Qt Creator created dialogs.

         oMain:cChildName -> object represented by cChildName.

       The limitation in this approach is that you must have to 
       set the name in upper case.

       This implementation is made possible on top of oObj:findChild() method.
       Now you can construct a dialog and its children and then pass 
       only main window object to functions which can then access 
       its children transparently.

  * hbqtwidgets/hbqtbrowse.prg
    + Added: setObjectName( "TBROWSE" ) suffixed with next counter, 
       Just in case one wants to find it as oMain:TBrowse.

2013-02-15 18:53 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtbrowse.prg
    + Implemented: SET/GET Method :pressHeaderBlock().
       The block is executed whenever user clicks on any column header 
       and passes <nCol>,<cName>,<oBrw> arguments.

    % Changed: :verticalMovementBlock() passes the K_ constant associated
       with the movement, i.e., K_UP,K_DOWN,K_PGUP, K_PGDN, K_CTRL_PGUP,
       K_CTRL_PGDN instead of 0 to 5. 

    + :verticalMovementBlock() is also executed when :configure() is called
        on browser and passes -3 as first argument.

    % Restructured and rewritten code to handle initial showing of 
       browser object. This fixes the long-standing glich where 
       browser rows were not displayed according to the height of the 
       viewport.

  * hbqtwidgets/tests/browdb.prg
    + Demonstrated: the use of :pressHeaderBlock().
       Clicking on the "Last Name" column header sets the index to "Last".
       Clicking on any other header set index to natural order.

2013-02-13 14:53 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtbrowse.prg
  * hbqtwidgets/hbqtdbu.prg
  * hbdbu/dbu.prg
    ! Fixed: a bad behavior in HbDBU when :goTop()/:goBottom() actions 
       were misbehaving per record pointer.

2013-02-12 19:34 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtcore/qth/QObject.qth
    % Flagged that :findChild(0 method is implemented in a different way,
       and should never be called via .qth.

  * hbqt/qtcore/hbqt_bind.cpp
  * hbqt/qtcore/hbqt_misc.prg
    + Implemented: QObject:findChild() method.
       Thanks to Francesco Perillo for the code.

  * hbqtwidgets/hbqtalert.prg
    + Added: QLabel:setOpenExternalLinks( .t. ).
       Now a html formated strings can be supplied to Alert().

  * hbqtwidgets/hbqtbrowse.prg
    + Implemented: HbQtBrowse:refreshWindow() method which can be 
       called with a connect to an event. The primary function of this 
       method is to recalculate the viewport area and set the number of 
       browser rows accordingly to reclaim the unoccupied area, 
       which at certain circumstances is not available when browser 
       is visible first time.

  * hbqtwidgets/hbqtdbu.prg
    + Implemented: availability of field selection when filter 
       expression is built, requested by Massimo. Also made the expression 
       builder title meaneingful.

  * hbdbu/dbu.prg
    % Reflection of above changes.

2013-02-06 19:34 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_hbqabstractitemmodel.cpp
    ! :Method :reset() now emits :layoutChanged() signal.
      This is made uniform for all versions and also is more efficient.

  * hbqt/hbmk2_qt.hb
    + Auto detection of Qt Major Ver synchronized.
       Thanks Viktor for the pointers.

2013-02-06 15:19 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_hbqabstractitemmodel.cpp
    ! Final fix for HBQAbstractItemModel() where :reset() method was 
       deprecated in Qt 5.0.1.

    ; NOTE: now all the demos, HbIDE, HbDBU are working fine on 
            HbQt 5.0.1.

            It is time to cheer.

2013-02-05 18:26 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/gtqtc/gtqtc.hbc
  * hbqt/qtcore/hbqtcore.hbc
  * hbqt/qtgui/hbqtgui.hbc
  * hbqt/qtnetwork/hbqtnetwork.hbc
  * hbqt/qtwebkit/hbqtwebkit.hbc
    + Necessary filters to set right Qt libs based on its major version.
       Majot Qt version is detected via HB_QT_MAJOR_VER env variable 
       until a suitable method is not detected.

  * hbqt/hbmk2_qt.hb
    + Added: code to initialize HB_QT_MAJOR_VER env variable to 4 if 
       definition is not provided.

    ; NOTE: must set env variable HB_QT_MAJOR_VER to 5 before 
            compiling HbQt with Qt 5+.

  * hbide/docks.prg
    - Commented out QMainWindow:setStyleSheet() call.
    + HbIDE compiles and runs fine with Qt 5.0.1.
      HbDBU compiles fine with Qt 5 and shows up, but HbQtBrowse()
       does not display row contents. I know the reason. 
       Qt has dprecated QABstractItemMode:reset() method and there 
       is no way ( so far ) to simulate this behavior. 

2013-02-05 16:38 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtcore/qth/QCoreApplication.qth
    ! A crucial fix where number of parameters are changed.
  * hbqt/hbmk2_qt.hb
    + More constructs to control Qt 5.0.1.

2013-02-05 13:54 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/gtqtc/gtqtc.cpp
  * hbqt/gtqtc/gtqtc.h
    + Compilable for all versions of Qt inclusing 5.0.1.

2013-02-04 18:35 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    + Version bump.

  * hbqt/qtnetwork/hbqt_init.cpp
  * hbqt/qtnetwork/qth/QFtp.qth
  * hbqt/qtnetwork/qth/QHttp.qth
  * hbqt/qtnetwork/qth/QHttpHeader.qth
  * hbqt/qtnetwork/qth/QHttpRequestHeader.qth
  * hbqt/qtnetwork/qth/QHttpResponseHeader.qth
  * hbqt/qtnetwork/qth/QUrlInfo.qth
  * hbqt/qtopengl/qth/QGLWidget.qth
    + All modules comiliable with Qt 5.0.1 except for QtWebKit.
       hbmk2 reports: dependency not found "qtwebkit".

2013-02-04 17:39 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/hbmk2_qt.hb
    ! Fixed: last commit was not compiling QDirModel.qth.

2013-02-04 17:00 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_hbqabstractitemmodel.cpp
  * hbqt/qtgui/qth/QDirModel.qth
  * hbqt/qtgui/qth/QWindowsStyle.qth
  * hbqt/hbmk2_qt.hb
    + Implemented: necessary constructs to let HbQt compile with 
       Qt 5.0.1 while remaining backward compatible upto 4.8.4.
       QtGui module now compiles fine.

2013-02-04 15:52 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/qth/QAbstractProxyModel.qth
  * hbqt/qtgui/qth/QApplication.qth
  * hbqt/qtgui/qth/QColorDialog.qth
  * hbqt/qtgui/qth/QDesktopServices.qth
  * hbqt/qtgui/qth/QDirModel.qth
  * hbqt/qtgui/qth/QDrag.qth
  * hbqt/qtgui/qth/QFont.qth
  * hbqt/qtgui/qth/QGraphicsItem.qth
  * hbqt/qtgui/qth/QGraphicsScene.qth
  * hbqt/qtgui/qth/QHeaderView.qth
  * hbqt/qtgui/qth/QImage.qth
  * hbqt/qtgui/qth/QItemSelection.qth
  * hbqt/qtgui/qth/QItemSelectionModel.qth
  * hbqt/qtgui/qth/QLCDNumber.qth
  * hbqt/qtgui/qth/QMatrix.qth
  * hbqt/qtgui/qth/QMouseEvent.qth
  * hbqt/qtgui/qth/QPageSetupDialog.qth
  * hbqt/qtgui/qth/QPaintDevice.qth
  * hbqt/qtgui/qth/QPainter.qth
  * hbqt/qtgui/qth/QPixmap.qth
  * hbqt/qtgui/qth/QPlainTextEdit.qth
  * hbqt/qtgui/qth/QRegion.qth
  * hbqt/qtgui/qth/QSortFilterProxyModel.qth
  * hbqt/qtgui/qth/QSound.qth
  * hbqt/qtgui/qth/QStringListModel.qth
  * hbqt/qtgui/qth/QTextDocument.qth
  * hbqt/qtgui/qth/QTextEdit.qth

  * hbqt/qtgui/hbqt_hbqabstractitemmodel.cpp
  * hbqt/qtgui/hbqt_hbqgraphicsitem.h
  * hbqt/qtgui/hbqt_hbqgraphicsscene.cpp
  * hbqt/qtgui/hbqt_hbqgraphicsscene.h
  * hbqt/qtgui/hbqt_hbqplaintextedit.cpp
  * hbqt/qtgui/hbqt_hbqplaintextedit.h
  * hbqt/qtgui/hbqt_hbqsyntaxhighlighter.h
  * hbqt/qtgui/hbqt_hbqtableview.h
  * hbqt/qtgui/hbqt_hbqvalidator.cpp
  * hbqt/qtgui/hbqt_init.cpp
  * hbqt/qtgui/hbqt_utils.cpp

  * hbqt/hbmk2_qt.hb
    + Changes: needed to get HbQt compile on Qt 5.0.1.
       Still a couple of more changes are required in the engine 
       to get QtGui compilable with latest Qt, which hopefully will 
       make up today. Most of the QtGui compiles fine. Stay tuned...

2013-02-01 13:58 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtcore/hbqt_hbqslots.cpp
  * hbqt/qtcore/hbqt_init.cpp
  * hbqt/qtgui/hbqt_init.cpp
    % Changed: :toAscii() => :toLatin1().
      Now QtCore module can be compiled under Qt 5.0.1 and seems to be 
      working fine upto Qt 4.8.3.

2013-02-01 13:37 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtcore/qth/HBQString.qth
  * hbqt/qtcore/qth/QAbstractItemModel.qth
  * hbqt/qtcore/qth/QChar.qth
  * hbqt/qtcore/qth/QCoreApplication.qth
    ! Fixed: an ageing-eye syndrome.

2013-02-01 12:55 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtcore/qth/HBQString.qth
  * hbqt/qtcore/qth/QAbstractItemModel.qth
  * hbqt/qtcore/qth/QChar.qth
  * hbqt/qtcore/qth/QCoreApplication.qth
  * hbqt/qtcore/qth/QLibraryInfo.qth
  * hbqt/qtcore/qth/QLocale.qth
  * hbqt/qtcore/qth/QMetaMethod.qth
  * hbqt/qtcore/qth/QMetaType.qth
  * hbqt/qtcore/qth/QRegExp.qth
  * hbqt/qtcore/qth/QTextCodec.qth
  * hbqt/qtcore/qth/QUrl.qth
    + Added:  [*V=-0x040900*]
       A version info prefixed with minus sign will be used as 
        #if QT_VERSION <= 0x040900

  * hbqt/hbmk2_qt.hb
    + Added: necessary modification to honor [*V=-0x040900*] mark-up.

  ; WARNING - Regression is possible with code written upto Qt 4.8.4.
              I cannot test until all modules are built with latest 
              version which will take a sustained effort from all of us.
              You need to report back if any piece of code misbehaves.

2013-02-01 11:32 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtdbu.prg
    + Fixed: unresolved external "ErrorBreak()". Seems the function 
       is contained in xhb lib which I was using in test scenariors.
       Sorry for this negligence.

2013-01-31 17:50 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/resources/link.png
  * hbqtwidgets/hbqtwidgets.qrc
    + Added: one more image.

  * hbqtwidgets/hbqtgetlist.prg
    % Code formatting.

  * hbqtwidgets/hbqtgetsys.prg
    % Code cleanup.    

  * hbqtwidgets/hbqtalert.prg
    + Added: FUNCTION HbQtGetAt( nGlobalX, nGlobalY, cVar, cPic, cColor, bValid ) -> cVar | NIL
       The function fetches a single GET at global <nGlobalX>,<nGlobalY> 
       screen coordinates inside a transparent modal dialog. WHEN clause 
       is omitted because appln will call this function on a GET which has 
       to be fetched actually.

  * hbqtwidgets/hbqtbrowse.prg
    + Implemented: SET/GET METHODE verticalMovementBlock( bBlock ).
       The method is a callback reporting to appln when an actual vertical 
       movement occurs. By actual movement means if no hittop/hitbottom 
       is reached. The method was necessary to implement <LINKED TABLES>
       protocol implemented in HbDBU (Read Below).

        oBrowse:verticalMovementBlock := {|nMode,p2,oBrw| ::updateLinks( nMode, p2, oBrw ) }
          <nMode> == 0,1,2,3,4,5,6 ( Will document later ).
          <p2>    == NIL
          <oBrw>  == Reporting Browse Object

  * hbqtwidgets/hbqtdbu.prg
    + Added: credits to my employers, Curacao, for supporting this project.

    ! Fixed: few errors reported on the list.
    % Optimized: code offered on the list.          
    + Implemented: <Linked Tables> protocol. In Clipper language 
       relational tables. N number of tables can be nested 
       to build a complex relational hirarchy (parent/child/grandchild).

       How it Works:

       1. Open some tables on a HbDBU panel, organize them with positioning and sizing.
       2. Set the appropriate indexes.
       3. Close HbDBU to save these settings, just-in-case.
       4. Click on the <Link> icon on HbDBU's toolbar.
       5. A dialog will appear with a list of aliases open on the current panel.
       6. Drag and drop the aliases over to its desired parent. This can be done in 
          any combination, viz., parent
                                   child_1
                                     grandchild_1_1
                                   child_2
                                   child_3
                                     grandchild_3_1
                                 parent_2
                                 ...
       7. Once satisfied, what would you like to see, close HbDBU and run again, 
          just-in-case.  Do not worry, your session is saved.
       8. Double-click on <Link Expression> column of an alias, a GET will open-up.
       9. Press F2 which will open a list of fields of its parent alias.
       10.Double-click on a field, which will be inserted at the current 
          cursor position. Build appropriate and valid expression matching 
          with its current index expression.
       11.Note that you won't be able to leave the GET until expression is 
          syntactically valid. No check is performed for the type of returned 
          value of expression evaluation. The reason is that the links map 
          building is independent of current index, which could be set 
          at later time.
       12.Press <OK> button to activate the links. If you have appropriate indexes 
          already set, the browsers will instantly reflect the linked data only.
          Any vertical movement in the parent browser will refresh the child browsers.
       13.Now a step advanced: uncheck the checkbox at the left of some child, 
          the child browser will stop to be refreshed. Old link-expression 
          will stay though. (This is subject to change, I am thinking).
       14.Close HbDBU, run it again, click on the <Lin> icon, click on <OK>
          to activate the links.

       ;  Hopefully you will offer some advice.   

2013-01-31 17:46 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/main.prg
    % Small optimization to the last commit.

2013-01-31 17:45 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/main.prg
    ! Fixed: normalizing the file names supplied on command line.
       Bug is reported by Massimo, thanks.

2013-01-29 11:21 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtcore/qth/QDate.qth
    + Added: missing public functions, thanks Luigi for pointer.

2013-01-28 18:24 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetlist.prg
    + Added: function hbqtGetBlankValue( xValue )->xBlankValueOfTypeXValue

  * hbqtwidgets/hbqtbrowse.prg
    ! Made public: methods :skipRows( nRows ) and :skipCols( nCols )

  * hbqtwidgets/hbqtdbu.prg
    ! Fixed: double-click on Table tree node was not opening the table.
    ! Fixed: duplicate entries in Tables tree.
    + Implemented: SCOPE and FILTER expressions are retained for the 
       current session.
    ! Few optimizations.

  * hbdbu/dbu.prg
    + Implemented: Interface clicked :edit() event to "Save Record".

  ; NOTE: appears Qt has a bug in QHeaderView:sectionMoved() signal.
          In no way I am able to control its behavior. So second attempt
          has been failure again.
  
          Numeric fields cannot be resized because we are passing a 
          formatted string when data request is received. As per standard
          grid behavior, ... is shown if text is hidder at the right.

2013-01-28 11:59 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqtgui.ch
    + Added: many constants, pulled by Luigi Ferraris, thanks.
       Please follow hbqtgui.ch's formatting standards when providing 
       such constants. Thanks anyway.

2013-01-25 15:22 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/resources/info.png
    + Image miissed from prev commit.

  * hbqtwidgets/hbqtdbu.prg
    + Many, many, many changes. All will be reflected in documenttaion.
       Difficult to jot down in ChangeLog.

  * hbdbu/dbu.prg
    + Fully functional and usable HbDBU. A different experience!
  
  ; WHAT HAS BEEN ACCOMPLISHED IN HbDBU - A BRIEF OVERVIEW

         COMPONENT
    * All components are completely configurable on application level.
    * Multiple Panels to spread browsers.
    * Allows opening same table n number of times.
    * Allows opening same table on any panel.
    * Allows index manipulation on browser level.

         APPLICATION
    * Splash screen.
    * About HbDBU.
    * Shows how to pull information about HbDBU's various components 
       and save them and then how to retrieve and populate them 
       back on next run. These are :
        1. Tables Tree structure.
        2. Created Panels.
        3. Opened tables with index order, record number, column position, 
            contained columns, columns order.
    * Implements almost all database actions, viz., 
        1. Edit a field.
        2. Edit a record.
        3. Delete a record.
        4. Append new record.
        5. Set and Clear a scope.
        6. Set and clear a filter.
        7. Seek, soft-seek, seek-last.
        8. Find in Field.
        9. Lock/Unlock a current/selective record.
        10.List of locked records.
    * Editing is implemented as:
        1. Edit only current cell.
        2. Edit row cell-by-cell.
        3. Edit cell row-by-row. 

    * Remembers exact state of last run including entries in 
       Tables Tree, created panels, opened tables with exact views.

2013-01-25 13:27 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/resources/add-column.png
  + hbqtwidgets/resources/delete-column.png
  + hbqtwidgets/resources/select-column.png
  + hbqtwidgets/resources/harbour-dbu.png
    % Image for HbDBU splash screen.

  * hbqtwidgets/hbqtwidgets.qrc
    + Added: few more icons.

  * hbqtwidgets/hbqtalert.prg
    + Added: function HbQtAChoice( nTop, nLeft, nBottom, nRight, acMenuItems, xSelectableItems, ;
                                   cUserFunc, nInitItem, nWindowRow, cTitle, oParent )
       Currently only minimum functionality but is scheduled to be enhanced
       per Clipper documentation.

    + Added: function FUNCTION HbQtMsgBox( cMsg, cTitle ).
       Scheduled to be enhanced.

  * hbqtwidgets/hbqtgetlist.prg
    * Enhanced: function __hbqtGetNextIdAsString( cString ).

  * hbqtwidgets/hbqtbrowse.prg
    -+ Replaced: Index ComboBox and JumpToColumn comboBox with drop-down menu 
        embedded toolbuttons. It occupies less horizontal space plus offers 
        better toolbar look.

    + Added: toolbar icons <Add a Column> and <Delete Current Column>
       <Delete Current Column> is straight forward. Clicking on it will delete 
        the current highlighted column off the browser view.
       <Add a Column> needs :addColumnsBlock to be supplied by the 
        application which will be responsible to populate <Add Columns Menu>
        as well as inserting a properly configured column based on the 
        selection of field name from drop down menu. For example:
 
          oHbQtBrowse:addColumnsBlock := {| nMode, cColumn, oBrowse | AddMyColumn( nMode, cColumn, oBrowse ) }

        The block is evaluated with nMode == 0 once when user clicks on the 
        <Add Columns Icon> first time which requests the appln to supply 
        the names of the columns or fields and populates the drop down menu with them.

        The block is called with mode == 1 when user activates a prompt
        of drop-down menu. <cColumn> contains the name of the activated propmt.
        It is the responsibility of the application to insert a column depending 
        on the <cColumn> value.

        Please study the implementation code inside tests/browdb.prg.

  * hbqtwidgets/tests/browdb.prg
    + Added: Code to demonstrate the usage of :addColumnsBlock.

2013-01-25 13:17 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/main.prg
    ! Removed: residual trace message.

2013-01-25 13:13 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/main.prg
    ! Fixed: Double-click on a node in Project Tree representing source
       file with relative path was not being opened. Thanks to 
       Gregory Shashkoff for the report and exact explanation.

2013-01-18 18:51 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/projmanager.prg
    ! Fixed: to properly pass "Launch Parameters" of "Propereties" dialog 
       while launching the application. A long standing bug.

  * hbqtwidgets/hbqtbrowse.prg
    + Added: :showIndicator( cRgbColorString )
       Places a 2 pixel high line with <cRgbColorString> on top of the 
       browser window. This facilitates the place a warning system on the 
       tables having utmost sensivity.

  * hbqtwidgets/hbqtdbu.prg
    + Made public some attributes of the MdiBrowser, i.e., :connection(), :driver().

  * hbdbu/dbu.prg
    + Added code to show a RED line on top of the browser if a table is opened 
       via a specific connection.

2013-01-18 16:29 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    * Version-bump.

  * qtcontribs.hbp
    + Added: build parameters for HbDBU.

>>>>>>> .r143
2013-01-18 15:40 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtdbu.prg
    % Minor.

  + hbdbu
  + hbdbu/resources
  + hbdbu/resources/cube.png
  + hbdbu/resources/dashboard.png
  + hbdbu/resources/exit.png
  + hbdbu/resources/n-0.png
  + hbdbu/resources/n-1.png
  + hbdbu/resources/n-2.png
  + hbdbu/resources/n-3.png
  + hbdbu/resources/n-4.png
  + hbdbu/resources/n-5.png
  + hbdbu/resources/n-6.png
  + hbdbu/resources/n-7.png
  + hbdbu/resources/n-8.png
  + hbdbu/resources/n-9.png
  + hbdbu/dbu.prg
  + hbdbu/dbu.qrc
  + hbdbu/dbu.ui
  + hbdbu/hbdbu.hbp
  + hbdbu/mydbu.hbp
    + Initial commit of HbDBU.
       Just play with this toy. Do not initiate embedding HbQtDbu() 
       in your applications as refinement in internal architect is 
       on the cards. Some details are scheduled to be changed.

    ; Note that the HbDBU contains all elements which I am employing 
       for our in-production implementation but guarded against the 
       directives. You can unfold them as you deem fit. The real-time 
       usage is always preferred to expose the full functionality 
       than a reduced demo application, so hope that you will bear 
       with me.

       The detailed documentation will follow after internal architect 
       will reach my satisfaction level. Next couple of weeks I am 
       onto this only. 

       If you deem appropriate, extend your opinions and experiences 
       of any DBU you had been living with. Hopefully maximum will 
       make-up inside HbDBU.

    ; Enjoy with the multi-platform compliant HbDBU.

2013-01-17 18:43 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/hbqtdbu.prg
  + hbqtwidgets/hbqttoolbar.prg
  * hbqtwidgets/hbqtwidgets.hbp
    + Added: Class HbQtToolbar() and HbQtDbu().
       The last week has been so hectic but results are very fruitful.
       HbQtDbu() is a COM like implementation of GUI Database Manager 
       which can be embedded into any application. All its components 
       are fully configurable. A detailed overview and a usable and 
       expandable application will be committed in a couple of days.

    ; You will really relish this implementation.

2013-01-11 18:51 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtwidgets.qrc
  + hbqtwidgets/resources/help.png
    + Added: help.png.

  * hbqtwidgets/hbqtbrowse.prg
    + Fixed: flickering of windows when <Search> was initiated.
    + Added: <Help> icon on the toolbar.
    + Started: implementation of displaying appln supplied help info 
       in an integrated way. Currently Alert() is being used but 
       is scheduled to be presented in a meaningful way. Complete 
       documentation will follow after it reaches a satisfactory level.

  * hbqtwidgets/tests/browdb.prg
    + Added: code to show a help alert when <Help> icon is clicked.

2013-01-11 18:51 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtalert.prg
    ! Fixed: text rendering was not don with monospace font.

  * hbqtwidgets/hbqtbrowse.prg
    % Changed: ACCESS|ASSIGN MESSAGE editable() => editEnabled()
    + Added: ACCESS|ASSIGN MESSAGE columnsComboEnabled( lEnabled )
       This hides the <toColumn> combobox on the browser toolbar.
    + Added: ACCESS|ASSIGN MESSAGE printingEnabled( lEnabled )
       This hides the <Print> toolbar button.

    ; NOTE: the above switches are operational on toolbar actions.
       From withing application all actions are available.

    % Rearranged: toolbar icons sequence. Now it is more usable.

    ! Fixed: <Search> variable was not sent to appln callback in 
       trimmed state causing to fail the serach on character columns.

  * hbqtwidgets/tests/browdb.prg
  * hbqtwidgets/tests/browser.prg
    % Some adjustments.

2013-01-11 02:01 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/resources/stop.png
    % Changed: <Stop> icon image.

2013-01-09 18:47 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtevent.prg
    + Added: function __hbqtKeyboard( <ncKey>, [<oWidget>] )
       Posts <ncKey> into <oWidget>'s event queue. 
       <oWidget> defaults to QApplication():focusWidget().
        The function provides a convinient mechanism to initiate another 
        action from with current action after returning from current 
        action. This protocol is the backbone of any GUI application.

  * hbqtwidgets/hbqtbrowse.prg
    + Added: public method :widget() which returns the main component 
       of browser and can be used to post events. This is :oTableView in HbQtBrowse().

    + Added: ACESS/ASSIGN METHOD searchText( <cSearchText> ).
       This displays <cSearchText> at the right side of statusbar 
       of browser widget. this is a convinient method to avoid creation of 
       widget to display user-input. ( Read below ).

  * hbqtwidgets/tests/browdb.prg
    + Added: code to demonstrate how INCREMENTAL search can be terminated from 
       withing appln :navigationBlock.
    
    + Added: code to demonstrate how an incremental search can be performed 
       taking use of oBrowse:searchText() method and how to take other actions
       while still in incremental search.

2013-01-09 14:49 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/hbmk2_qt.hb
    % Changed: class constructor from "NEW" to "INIT".
       This is in-line with Class(y) compatibility and will be useful 
       when Przemek will implement true objects in Harbour. 
       Though it will not be necessary at this moment, but still 
       re-build everything.

  * hbqt/qtcore/qth/QCoreApplication.qth
    % Detached: 2nd paarmeter of :postEvent() to use just like on stack object.

  + hbqtwidgets/resources/stop.png
  * hbqtwidgets/hbqtwidgets.qrc
    + Added: stop.png.

  * hbqtwidgets/hbqtgetlist.prg
    + Fixed: wrong implemention of sending :selectAll() to QLineEdit.

  * hbqtwidgets/hbqtgetsys.prg
    % Experimented: but failed, code still resides.
   
  * hbqtwidgets/hbqtbrowse.prg
    - Deactivated: moving the columns with mouse. Will come to it later.
    + Added: <Stop> browser toolbar icon adjoining <Scroll>.
       The icon remains in disabled state until a <Scroll> is initiated.
       Once clicked, its state is again disabled.

    % Removed: the <Stop> button appearing at the bottom row after <Scroll> 
       is initiated. Now toolbar icon <Stop> is enabled instead.

      <Scroll> event is now terminated if any other event is initiated.
      This is necessary to avoid multiple initializations leading to 
      weired behavior.

    + Enhanced: oBrowse:editCell( cPicture, cColor, bWhen, bValid, nKey )
       <nKey> is the key you would like to stuff in the edit buffer.
       This implementation respects "@K" function of <cPicture> parameter 
       or oColumn:picture clause is <cPicture> is not passed to :editCell().

  * hbqtwidgets/tests/browdb.prg
    + Added: code to demonstrate how "@K " in oBrowse:editCell() can be exploited.

2013-01-08 19:36 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/scroll.ui
  * hbqtwidgets/hbqtwidgets.hbp
    + Added: scroll.ui - Widget to fetch user options for a scroll.

  + hbqtwidgets/resources/scroll.png
  * hbqtwidgets/hbqtwidgets.qrc
    + Added: scroll.png.

  * hbqtwidgets/hbqtgetlist.prg
    % :selectAll() was wrongly called on other type of GET then QLineEdit.

  * hbqtwidgets/hbqtbrowse.prg
    + Added: appln callable method :scroll( [<nMode>], [<nMSInterval>] )
             Interface icon <Scroll> on the browser toolbar which call :scroll().
       
       This is a convinient mechanism to to present table with auto 
       scroll option where data is refreshed in a fixed interval. It is a 
       most useful function for upper management to provide a dash-board 
       like functionality. 

       If :scroll() is called without any parameter, then a dialog to 
       fetch user options is presented, otherwise scroll is initiated 
       immediately.

       <nMode> has three possible values:
       1. Scroll down-bottom-top-down - scrolling starts from current record,
           when :hitBottom is detected, jumps to top of the browser and starts 
           scrolling downwards.
       2. Scroll down-bottom - scrolling starts from current record and keeps 
           on downward. It does not check if :hitBottom is reached or not.
           Useful when user needs what latest records are being pushed into 
           the table.
       3. Sctoll to bottom of browser and issues :goBottom() always.
           Useful when user needs to review the latest info.

       A <Stop> push button stays in the bottom row+ location to stop the scrolling.

2013-01-07 13:15 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetlist.prg
    + Added: internal function __hbqtGetNextIdAsString( cString ) -> cString_<runningNumber>

  * hbqtwidgets/hbqtbrowse.prg
    % Changed: :setFocus() from PROTECTED to PUBLIC.
    + Implemented: vertical navigation with K_UP, K_DOWN, K_PGUP, K_PGDN,
       K_CTRL_PGUP, K_CTRL_PGDN while inside INCREMENTAL search mode.
       Under many situations this behaviour is very much required.

2013-01-07 05:36 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtalert.prg
    % Renamed: HbQtGetSome(...) => HbQtBulkGet(...)
    + Added: treating the GET in a combobox if one of the elements of 
       HbQtBulkGet()'s <xVariable> is an array of character strings. The 
       RETURN value will be a string of choice selected in combobox. the 
       first prompt in such array will be the default option when combo 
       is presented.

       Thanks to Angel Pais for the idea.

  * hbqtwidgets/tests/browdb.prg
    % Changed: call to HbQtGetSome() with HbQtBulkGet().

  * hbqtwidgets/tests/browser.prg
    % Minor.

2013-01-03 13:50 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtstd.ch
    + Added: HBQTBRW_* constants, usable to configure HbQtBrowse interface.

  * hbqtwidgets/hbqtalert.prg
    + Implemented: Function 
       HbQtGetSome( <xVariable>, [<xCaption>], [<xPicture>], [<xWhen>], [<xValid>], [<cTitle>] ) -> <xVariable>

       A general purpose function to fetch values of one or many GETS in a modal dialog.

       <xVariable> an array of variables or a single variable to GET.
          
                   If <xVariable> is an array of variables then all the following 
                   parameters must be an array of attributes matching the length of 
                   <xVariables>. Function does not check for the number of array indexes.

       <xCaption>  variable(s)|Literal(s) describing the GET. Defaults to "Variable_" + hb_ntos( nIndex ).
       <xPicture>  variable(s)|Literal(s) of PICTURE templates. Defaults to "".
       <xWhen>     block(s) to supply for :preValidate. Defaults to {|| .T. }.
       <xValid>    block(s) to supply for :postValidate. Defaults to {|| .T. }.

       <cTitle>    Title to display on GETs dialog's titlebar. Defaults to "Enter Some Values!".

       RETURNS     <xVariable> in the form they are supplied to the function. If ESCape is 
                   pressed then original values supplied to the function are returned.

                   GETs dialog is centered on the window which has focus at the time of 
                   calling this function.

       NOTE:       Name of the function may be changed. If you have a better name, please forward.

  * hbqtwidgets/hbqtbrowse.prg
    + Added: <GoTo> icon on the browser's toolbar to navigate to a designated record.
    + Implemented: ACCESS/ASSIGN method :gotoBlock  to execute :goto() method, either via 
       appln call or activating it via toolbar icon <Goto>. Interface just exposes the 
       visual elements to inform the appln about user interaction. The actual navigation 
       is performed at the appln level only. How...

         Appln: oBrowse:gotoBlock := {|| GotoMyRecord() }  
         User:  Clicks on the <Goto> icon. :gotoBlock is evaluated.
         Appln:
           STATIC FUNCTION GotoMyRecord()
           LOCAL nRec, nPRec := RecNo()
           IF ( nRec := HbQtGetSome( nPRec, "Record Number", , , , "GoTo ?" ) ) > 0
              dbGoto( nRec )
           ELSE
             RETURN .F.
           ENDIF
           RETURN nPRec != nRec

       If the :gotoBlock returns TRUE, the browser is refreshed, otherwise not.

    + Added: <Indexes> combobox on the browser's toolbar to change the index order.
    + Implemented: ACCESS/ASSIGN method :indexes. This accepts an array of index information as:

        AAdd( aIndexes, { "Natural Order", {|oBrw| dbSetOrder( 0 ), oBrw:refreshAll(), oBrw:forceStable() } } )
        AAdd( aIndexes, { "Last Name"    , {|oBrw| dbSetOrder( 1 ), oBrw:refreshAll(), oBrw:forceStable() } } )
        oBrowse:indexes := { aIndexes, 2 }

        First element of <aIndexes> is used to populate the <Indexes> combobox.
        Second element is a codeblock which will be executed when an option in combobox 
          is activated. 
        Second element of :indexes ASSIGNed array is used to activate <Indexes> combobox.
 
        <Indexes> combobox is viaible only if appln has supplied :indexes information.

        This is a convenient mechanism to armour the end user with many more options.

    % ReImplemented <Search> option. Please discard the previous documentation. 
       This new implementation empowers you with executing an incremental search, 
       a search within the unindexed field and much more. How...

        Appln: oBrowse:searchBlock := {|xValue,nMode,oBrw| LookMySearch( xValue,nMode,oBrw ) } 
                                         -> 
                                      { [<xValue>], [<cPicture>], [<nMode]> }

        Appln: Inside :navigationBlock - :search( [<xValue>], [<cPicture>], [<nMode]> )
        Interface: <Search> icon - :search()
        
        METHOD Search( [<xValue>], [<cPicture>], [<nMode]> )
          If [<xValue>] == NIL, :searchBlock will be called to obtain <Search> info as:
            IF HB_ISBLOCK( ::searchBlock )
               aInfo := Eval( ::searchBlock, NIL, NIL, Self )
            ENDIF

          It will be the responsibility of the appln to supply info regarding what to fetch 
          and how to respond to search creteria. If appln does not return back an array of 
          3 elements, viz., 1. What to search as a variable of type CDNL, viz., 
          space( 30 ), 0, or whatever, and mode of search (read below), then these three values
          defaults to : 1. the value returned by Eval( ::getColumn( ::colPos ):block )
                        2. ::getColumn( ::colPos ):picture
                        3. HBQTBRW_SEARCH_ONCE 
                             Other options:
                           HBQTBRW_SEARCH_INCREMENTAL
                           HBQTBRW_SEARCH_BYFIELD
          depending upon the above three values, interface exposes a modal GET at the 
          last+ row of the browser window to fetch <Search> value, initially set with 
          value of <xValue>.

          The next action is carried out in accordance with <nMode>:
          IF nMode == HBQTBRW_SEARCH_ONCE
            Dialog to fetch value is closed, :serachBlock is evaluated again with modified 
            <xValue>, <nMode> and <Self>. Appln takes appropriate action. Typicaly, 
            appln will invoke this mode if an index is active.
          
          IF nMode == HBQTBRW_SEARCH_INCREMENTAL
            Dialog to fetch serach value stays, with every change in the GET value, 
            :serachBlock is evaluated with modified <xValue>, <nMode> and <Self>. 
            Appln takes appropriate action. Dialog to fetch search value stays until 
            RETURN is pressed which mark the end of the <Search> event. For the duration 
            of search, browser cursor is changed to ROW mode. Typicaly, 
            appln will invoke this mode if an index is active.

          IF nMode == HBQTBRW_SEARCH_BYFIELD
            Dialog to fetch value is closed. A timer event is started inside the interface
            at a 10 ms interval, which calls :searchBlock as usual. Then :searchBlock is 
            expected to return TRUE or FALSE to flag that <Search> is found or not. If NOT,
            then browser is moved down by one row. If YES or :hitBottom is detected then 
            <Serach> event is terminated. Appln can detect <ESC> press in the :navigationBlock,
            and can terminate the <Search> accordingly (study example below).

          In case of nMode == INCREMENTAL, after <Search> event is terminated, 
            :searchBlock is once again evaluated with no parameters. This is useful 
            to implement a lookup browser.

          Here is a minimum useful example, you can extend it to extreme:

          STATIC nLastKey := 0

          FUNCTION Main()
             LOCAL oBrowse := ...

             oBrowse:searchBlock     := {|xValue,nMode,oBrw| LookMySearch( xValue,nMode,oBrw ) }
             oBrowse:navigationBlock := {|nKey,xData,oBrw|  HandleMyOptions( nKey,xData,oBrw ) }

             RETURN NIL

          STATIC FUNCTION HandleMyOptions( nKey,xData,oBrowse )
             LOCAL xResult, i
             LOCAL lHandelled := .T.

             nLastKey := nKey
             ...

             RETURN .t. 

          STATIC FUNCTION LookMySearch( xValue,nMode,oBrw )
             LOCAL nRec
          
             IF xValue == NIL .AND. oBrw == NIL
                /* search is finished, take other action, this will help to build a selectable browser */
                Alert( "Current Record Number Is : " + hb_ntos( RecNo() ) )
          
             ELSEIF xValue == NIL                           /* Interface is requesting to initiate search */
                IF IndexOrd() == 1
                   RETURN { Space( Len( TEST->last ) ), NIL, HBQTBRW_SEARCH_INCREMENTAL }
                ELSE
                   RETURN { NIL, NIL, HBQTBRW_SEARCH_BYFIELD }
                ENDIF
          
             ELSE
                IF IndexOrd() == 1                          /* Interface is requesting to do the search as per needs */
                   nRec := RecNo()
                   IF ! dbSeek( Trim( xValue ) )
                      dbGoto( nRec )
                   ELSE
                      oBrw:refreshAll()
                   ENDIF
                ELSEIF nMode == HBQTBRW_SEARCH_BYFIELD
                   IF nLastKey == K_ESC
                      nLastKey := 0
                      RETURN .T.
                   ENDIF
                   RETURN Eval( oBrw:getColumn( oBrw:colPos ):block ) = xValue
          
                ENDIF
          
             ENDIF
          
             RETURN .T.
          

  * hbqtwidgets/tests/browdb.prg
  * hbqtwidgets/tests/browser.prg
    + Added: constructs to demonstrate above features.

2013-01-02 08:18 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/qth/QApplication.qth
    + Implemented: QWidgetList allWidgets(), QWidgetList topLevelWidgets().

       oList := QApplication():topLevelWidgets()
       FOR i := 1 to oList:count() - 1
          oWidget := oList:at( i )
          oWidget:show()
       NEXT

2012-12-29 00:19 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_hbqtableview.cpp
  * hbqt/qtgui/hbqt_hbqtableview.h
  * hbqt/qtgui/qth/HBQTableView.qth
    + Added: method - QRect visualRect( QModelIndex )
       The method was a "vrtual protected".

  * hbqtwidgets/hbqtstd.ch
    + Added: QREAD ... NOFOCUSFRAME 
       Flag to disable displaying a red bordered frame around the active GET.
       Was needed to implement in-place editing of browser cells ( Read below ).

  * hbqtwidgets/hbqtgetlist.prg
  * hbqtwidgets/hbqtgetsys.prg
    % Changed: the way FocusFrame was being constructed.
      Now every GetList has its own oFocusFrame instead of a single frame across
      the whole application, which had a drawback to not show-up if multiple 
      GET screens were floated at once. Also the visiblility of focus frame 
      is controllable by QREAD clause NOFOCUSFRAME.

  * hbqtwidgets/hbqtbrowse.prg
    + Implemented: in-place cell editing with PICTURE, COLOR, WHEN, VALID clauses.
       This is in addition to record editing in a separate adjoining dialog which 
       is called by application as oBrw:edit(...) or by clicking on the <Edit>
       icon of browser toolbar.

       On the contrary, Cell editing is only callable by the application. This 
       can be called as :

         oBrw:editCell( [<cPicture>], [<cColor>], [<bWhen>], [<bValid>] ) -> xModifiedValue
           <cPicture> Defaults to oColumn:picture.
           <cColor>   Defaults to "N/BG*"
           <bWhen>    Defaults to oColumn:preBlock
           <bValid>   Defaults to oColumn:postBlock

       How it works;
         
          ...
          oBrw:navigationBlock( {|...| NavigateMe(...) } )
          ...

          FUNCTION NavigateMe( nKey...)
             SWITCH nKey
             CASE K_SH_F12
                xModifiedValue := oBrw:editCell()
                IF xModifiedValue != NIL  /* In Case ESC is Pressed */      
                   // Save xModifiedValue at appropriate container.
                ENDIF
             ENDSWITCH

         The above is the minimum required. If :editCell() is called without 
         supplying any arguments, then defaults are applied to GET the value.
         If ESCape is pressed on the GET then NIL is returned. In that case 
         appln can take the appropriate action.

         Current highlighted cell is subject to :cellEdit() call.
         oColumn:block with <xModifiedValue> is __ALWAYS__ called when 
         RETURN is pressed on GET and is postValidated.

  * hbqtwidgets/tests/browser.prg
    + Added code to demonstrate how to use cell editing.

  * hbqtwidgets/tests/browdb.prg
    + Added: following CASE statement in navigation SWITCH:
         
         CASE nKey == K_SH_F12
            IF dbRLock()
               oBrowse:panHome()
               oBrowse:Right()
               FOR i := 2 TO oBrowse:colCount()
                  xResult := oBrowse:editCell()  /* HbQt Entention */
                  IF xResult == NIL
                     EXIT                        /* ESCape is pressed */
                  ENDIF
                  SWITCH oBrowse:getColumn( i ):heading
                  CASE "Last Name"  ; REPLACE TEST->last     WITH xResult ; EXIT
                  CASE "First Name" ; REPLACE TEST->first    WITH xResult ; EXIT
                  CASE "Salary"     ; REPLACE TEST->Salary   WITH xResult ; EXIT
                  CASE "HireDate"   ; REPLACE TEST->HireDate WITH xResult ; EXIT
                  CASE "Age"        ; REPLACE TEST->Age      WITH xResult ; EXIT
                  CASE "City"       ; REPLACE TEST->City     WITH xResult ; EXIT
                  CASE "State"      ; REPLACE TEST->State    WITH xResult ; EXIT
                  CASE "Zip"        ; REPLACE TEST->Zip      WITH xResult ; EXIT
                  CASE "Notes"      ; REPLACE TEST->Notes    WITH xResult ; EXIT
                  ENDSWITCH
                  oBrowse:refreshCurrent()
                  IF i < oBrowse:colCount()
                     oBrowse:Right()
                  ENDIF
               NEXT
               IF xResult != NIL
                  dbCommit()
               ENDIF
               dbRUnlock()
            ENDIF
         OTHERWISE

    ; This demonstrate the exact usage one might had employed in Clipper 
      application to fetch data entry in a browser. In any real-world 
      senario, ground is ready to be exploited. Now I can dream of porting 
      my Harbour simulated console/GUI applns to HbQt.

2012-12-27 02:24 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/resources/minus-1.png
  + hbqtwidgets/resources/minus-2.png
  + hbqtwidgets/resources/plus-1.png
  + hbqtwidgets/resources/plus-2.png
  * hbqtwidgets/hbqtwidgets.qrc
    + Added: above images.

  * hbqtwidgets/hbqtgetlist.prg
    + Added: __hbqtGetWindowFrameWidthHeight( oWnd )

  * hbqtwidgets/hbqtbrowse.prg
    + Added: Browser Toolbar Actions - Freeze++, Freeze--, RFreeze++, RFreeze--

    + Added: Variable :editable to flag if toolbar icon <Edit> should be 
       enabled or not. By default it is ENABLED. It will be important 
       in many cases. Still, application initiate the EDIT bu calling 
       :edit(...) from its :navigationBlock.

    + Started: methods to facilitate column movement by mouse.
        Seems it is extremely difficult process, still making efforts.

    ! Fixed: a nasty bug which was causing the horizontal navigation weired.

    % Synchronized: editing interface to match the height of browser window.
 
    % Code cleanup and organization.

  * hbqtwidgets/tests/browdb.prg
  * hbqtwidgets/tests/browser.prg
    + Added: new synchronizations.

2012-12-26 15:23 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtbrowse.prg
    + Implemented: Browser Printing. How...

       Activation: 
         Application code - oBrw:print( cPrinter, lOpenPrintDialog )
         Interface        - <Print> icon on the browser toolbar

       After Activation:
         Looks for oBrw:title. If a value is found, then it is interpreted as
           SWITCH valtype( ::title )
           CASE "C"
              aTitle := hb_aTokens( ::title, ";" ) - Just like Alert().
           CASE ""A"
              aTitle := ::title
           CASE "B"
              aTitle := Eval( ::title, NIL, NIL, oBrw )
              Again <aTitle> is tested for string or array, and treated as above.
           ENDSWITCH
         <aTitle> defaults to { "Browsed Data" }
         <aTitle> is then printed on top of each page printed.
         First 5 Lines are significant. If more are supplied, those are ignored.

         Next line after <aTitle> is done with is :
           DtoC( Date() ) + " " + Time() + " " + "Page:" + hb_ntos( #pageNo )
         
         Next follow Headers Line.

         Then follows the actual data.

         Columns are printed exactly as seen in the browser, with same font, 
         picture and colors. So it gives a WYSIWYG look. Most of the time printed 
         output is pleasing.

         The only those columns, counted from left, make up to the printed output 
         as many fit into the page width for printer in question. To start with 
         PORTRAIT mode is selected, but you can always get LANDSCAPE output 
         from the PREVIEWER dialog. More columns then will be automatically 
         accomodated.

         I found a nasty bug, apparently in Qt itself, as follows:
         If QPrintDialog is executed, either inside browse code, or inside
         previwer window, application GPFs. So far I have not found a solution
         what is happening. It may be due that my laptop is not actively 
         connected to a printer and hence Qt has some issues there. Later 
         I will revisit the code in my office to get more clues. Till 
         then...

         If you find motivation to debug, please uncomment some code in 
         hbqtbrowse.prg and recompile yourself. If you find any solution,
         please report me back.

2012-12-25 17:56 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/tests/browdb.prg
    + Added: how to SEARCH implementation. Missed from previous.

2012-12-25 15:40 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    * Version bump.

  * hbqt/qtgui/hbqt_hbqabstractitemmodel.cpp
    ! Minor.

  + hbqtwidgets/hbqtwidgets.qrc
  + hbqtwidgets/resources/*.png
    + Resource Images.

  * hbqtwidgets/hbqtwidgets.hbp
    + Added: hbqtwidgets.qrc

  * hbqtwidgets/hbqtgetlist.prg
    + Added: __hbqtImage( cPngWithoutExt )
       The function can be used in appln also to obtain many
       common usage images. This may eliminate the need to have 
       application local images. Hopefully will reduce the burden
       on application part.

  * hbqtwidgets/hbqtbrowse.prg
    % Changed: :editBlock's parameters.
       oBrw:editBlock := {| oBrw, aOrg, aMod, aCap | ... }
         =>
       oBrw:editBlock := {| aMod, {aOrg,aCap}, oBrw | ... }
       
       It is in accordance with decided protocol where any application
       supplied codeBlock, implemented over and above TBrowse blocks, 
       will be fired with three parameters. First parameter will represent 
       the most expected return value, 2nd will contain any additional 
       data important and ancilliary to the 1st param, and 3rd will 
       always be browse object in evaluating the block.

    % Changed: method :openEditor(...) => edit(...)
               method :edit() => editCell()
                 Confirms to general common sense.

    + Implemented: ToolBar on top of the browser window. 
       Toolbar can be toggled to be displayed/hidden. Toolbar contains common 
       actions a user always expect off a GUI browser, viz., 

         Edit | Print | Search | GoTop | Up | Down | GoBottom | PanHome | Left |
         Right | PanEnd | ComboToColumn | MoveFirst | MoveLeft | MoveRight | MoveLast
       
       Toggling the display of toolbar is controlled via ACCESS | ASSIGN method :toolbar.

         oBrw:toolbar := ! oBrw:toolbar

       By default ToolBar is hidden.

       <Print> option is not active yet.

    + Implemented: activation/execution of context menu. This is controlled as:

         oBrw:contextMenuBlock := {| oPos, NIL, oBrw | ... }

       When context menu request is detected, HbQtBrowse will look for :contextMenuBlock,
       and if found, will evaluate it with global mouse position (QPoint) as 1st param,
       NIL as 2nd, and Self as 3rd. It will be the responsibility of appln to respond 
       to this event. 

       And if :contextMenuBlock will not be supplied by the appln, a default context 
       menu will be executed with some of the actions available on the toolbar.

    + Implemented: StatusBar at the bottom of the browse window.
       Again it is controlled by application, like:

         oBrw:statusbar := .T. 
           OR
         oBrw:statusbar := ! oBrw:statusbar

       To display message on the StatusBar:

         oBrw:statusMessage := cMessage

       To clear the StatusBar:

         oBrw:statusMessage := ""       

       By default ToolBar is hidden.
    
    + Implemented: SEARCH feature, interface and building blocks only.
       Application will take responsibility to carry on the search operation.
       HbQtBrowser merely provides the interface to communicate between browser 
       interface and application code. How ...

       1. Appln will post a block as:

            oBrw:searchBlock := {|xSearch, nColPos, oBrw| ... }

       2. The SEARCH event could be started either by browser interface or 
          application inside :navigationBlock. 
           
          Interface: Click on the <Search> toolbar button.
          Application: calling oBrw:search( xValue ).

          In both instances, a single GET in a modal window will be presented.
          If appln has initiated the SEARCH, and has provided <xValue> in 
          :search( xValue ) call, then this variable is GET. If click on 
          <Search> icon has initiated it, or <xValue> == NIL, then the 
          value contained in current hilighted cell of browser will be GET.
          In the latter case, column's PICTURE is also applied to it.
          GET will terminate on RETURN press, and searchBlock will be evaluated
          with GET value as 1st param. From here it is the responsibility of 
          the appln to perform the actual search.

          The demo code is included in tests/browser.prg and test/browdb.prg.
          browser.prg addresses it for an array, while browdb.prg on a table.

  * hbqtwidgets/tests/browdb.prg
  * hbqtwidgets/tests/browser.prg
    + Added: code to demonstrate above features.

  ; NEXT: Printing a browser.

2012-12-23 23:55 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtstd.ch
    + Added: clause LASTGETBLOCK <lastGetBlock>
       With this QREAD command looks as:

       #command QREAD [ [ PARENT ] <GetParent> ] ;
                      [ FONT <oFont>           ] ;
                      [ LINESPACING <nSpc>     ] ;
                      [ TITLE <title>          ] ;
                      [ ICON <icon>            ] ;
                      [<nomodal:NOMODAL>       ] ;
                      [ PROPERTIES <prop>      ] ;
                      [ LASTGETBLOCK <bLast>   ] ;
                            => ;
             HbQtReadGets( @GetList, SayList, <GetParent>, <oFont>, <nSpc>, ;
                           <title>, <icon>, <.nomodal.>, <{prop}>, <{bLast}> )

       ; Read below.

  * hbqtwidgets/hbqtgetlist.prg
    + Added: method lastGetBlock( bBlock ) SETGET
       Placeholder to hold <lastGetBlock> of QREAD.

  * hbqtwidgets/hbqtgetsys.prg
    + Implemented: to detect if GET in focus is the last GET in current GetList,
                   and if yes, then fire the <lastGetObject> block. The check
                   is performed in :postValidate() method.

  * hbqtwidgets/hbqtbrowse.prg
    + Implemented: browser row editor honoring the :preBlock, :postBlock, :picture
       properties of columns. Thanks to QGET/QREAD of HbQt which made it possible 
       to happen. The whole process is application controlled as per the true spirit 
       of TBrowse. The following methods are exposed to the application:

         :editBlock( bBlock ) GETSET
            The block is responsible to "SAVE" data collected with editor widget.
            If no :editBlock is specifed, a simple oColumn:block is evaluated
            with modified data as its only parameter.
            :editBlock has to be defined as:

            oBrowse:editBlock := {|oBrw, aOriginal, aModified, aCaptions|  ;
                                      SaveMyData( oBrw, aOriginal, aModified, aCaptions ) }

            at the minimum. Application may pass other parameters to the "SAVE" 
            function as appropriate. Here is brief description of 4 parameters:
            
            <oBrw>      No need to explain, it is oBrowse in question.
            <aOriginal> Array holding original values of the columns before "SAVE" 
                        is requested. It is sent to facilitate better control 
                        on determining what needs to be saved in real.
            <aModified> Array holding modified values of the columns.
            <aCaptions> Array holding <oColumn:heading> property. This facilitates
                        to recognize which data item needs to be updated.
             
            NOTE: Tbrowse does not know anything about the data source. Also columns
                  in a browse can be ordered to any position. So it is difficult 
                  to guess where a modified value needs be saved. Here comes the 
                  importance of <oColumn:heading>. I believe, you all must be 
                  providing unique headings to columns, and if not, please set 
                  your code right to grab the power of GUI editing.

         :openEditor( cTitle, lSaveOnLastGet, lDownAfterSave )
            The method needs to be called by the application, generally detecing 
            an event in :navigationBlock, but may be by other means also. This opens 
            a modal dialog adjoining the right edge of browser viewport. Editor will 
            display <cTitle> in the title-bar. The position and size will be saved 
            for current session of underlying browser. Next invocation will position
            it at last closing coordinates. Edotor is composed of a scrollable 
            QFormLayout based form containing the GETs of columns data. At the bottom 
            are 5 buttons with corresponding accelerator keys. Focus will be 
            positioned on the first GET ( column ). Navigation of the GETs is 
            per Harbour standards. WHEN, VALID and PICTURE instance variables are 
            applied over the GETs. 

            When last GET is hit by ENTER, <lSaveOnLastGet> [Defaults to TRUE], will 
            be examined. If TRUE, the <lastGetBlock> is fired with 4 parameters, i.e.,
            <oBrw><aOriginal><aModified><aCaptions>. A LOGICAL is expected as the 
            return value of the <lastGetBlock>. If it is TRUE, no further action is 
            taken. If FALSE, <oColumn:block> is fired with modified value as parameter.

            Then <lDownAfterSave> [Defaults to TRUE] is examined. If TRUE, the browser
            is moved with :down(), column values are gathered, GETs are populated 
            with new row value. The process goes on until user closes the Editor.
            Editor can be closed either by ESCAPing or clicking on X button.

            The bottom area buttons offer following functionality:

            <Save> <ALT+S        > Triggers "SAVE" action as described above.
            <Down> <ALT+DownArrow> Moves the browser :down() and refresh the GETs.
            <Up>   <ALT+UpArrow  > Moves the browser :up() and refresh the GETs.
            <Btm>  <ALT+PageDown > Moves the browser :goBottom() and refresh the GETs.
            <Top>  <ALT+PageUp   > Moves the browser :goTop() and refresh the GETs.

            The design and layout of the EDITOR is not yet final and may undergo
            needed changes as per user inputs.
  
  * hbqtwidgets/tests/browser.prg
    + Added: needed code to demonstrate the above mechanism.
       Press F12 to activate the Editor.

    ; Enjoy, and play with new toy.

2012-12-23 15:32 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/tests/validatormain.ui
    + Added: two more buttons to demonstrate one more way to fetch the GETs.

  * hbqtwidgets/hbqtgetlist.prg
    + Implemented: to fetch Clipper GETs in a QFormLayout installed on a widget.

  * hbqtwidgets/tests/validator.prg
    % Code simplified.
    + Added: code to fetch GETs in a QFormLayout with Clipper's GET system.

2012-12-23 10:24 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtbrowse.prg
    % Organized: class declaration code.

    + Implemented: :moveLeft()  - Moves current column left one column
                   :moveRight() - Moves current column right one column
                   :moveHome()  - Moves current column to first position
                   :moveEnd()   - moves current column to last position
                      
  * hbqtwidgets/tests/browser.prg
    + Added above methods of navigation.

2012-12-23 07:03 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtbrowse.prg
  * hbqtwidgets/hbqtcolumn.prg
    + TBrowse: 
       Implemented: :Footing
       Implemented: :rFreeze
         :rFreeze is equivalenet to :freeze with the difference that 
           columns at the right of oBrowse are turned to frozen state
           at the right side of the viewport.

  * hbqtwidgets/tests/browser.prg
    + F4 - :rFreeze++   F5 - rFreeze--
    + F8 - MoveLeft     F8 - Move Right

  ; NEXT: 1. in-built mechanism to <Search - Seek,Locate,Wild>
          2. context menu for navigation, etc.
          3. exposing different components of TBrowse window for finer tuning.
    All controllable via :navigationBlock plus certain action on viewport.   

2012-12-22 15:03 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtbrowse.prg
    ! Fixed: :panHome() and :panEnd() were not behaving properly.

2012-12-22 15:03 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetlist.prg
    - Removed: static function not used.
    % Cleaned: code.
  
  * hbqtwidgets/tests/browser.prg
    + Added: few comments.

2012-12-22 14:29 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtbrowse.prg
  * hbqtwidgets/hbqtcolumn.prg
  * hbqtwidgets/hbqtgetlist.prg
    + TBrowse:
       :verticalScrollbar := TRUE  [ Default: FALSE - Clipper Compatible ]
          Displays the vertical scroolbar to navigate the database/array.
          To use it effectively you need to define following blocks [with example]:

            oBrowse:firstPosBlock       := {| | 1                }
            oBrowse:lastPosBlock        := {| | LastRec()        }
            IF indexOrd() == 0
               oBrowse:posBlock         := {| | RecNo()          }
               oBrowse:goPosBlock       := {|n| DbGoto( n )      }
               oBrowse:phyPosBlock      := {| | RecNo()          }
            ELSE
               oBrowse:posBlock         := {| | OrdKeyNo()       }
               oBrowse:goPosBlock       := {|n| OrdKeyGoto( n )  }
               oBrowse:phyPosBlock      := {| | OrdKeyNo()       }
            ENDIF
      
        :horizontalScrollbar := TRUE [ Default: FALSE - Clipper Compatible ]
            No property is needed to set for its navigation.

        :cursorMode := HBQTBRW_CURSOR_ROW [Default: HBQTBRW_CURSOR_COLUMN ]
            This is equivalent to :colorRect.

  + hbqtwidgets/tests/browdb.prg
    + Added: demo application to applying TBrowse on a table with index.
             The demo also demonstrate the use of scrollbars and cursor mode.

  ; TODO:  mechanism to provide and execute context menu.
           What actions should go inside "Context Menu" ?

2012-12-22 11:14 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtbrowse.prg
  * hbqtwidgets/hbqtcolumn.prg
  * hbqtwidgets/hbqtgetlist.prg
  * hbqtwidgets/tests/browser.prg
    + Implemented: TBrowse behavior almost at its best.
       1. freeze,
       2. ColorSpecs and ColorBlocks.
       3. Alignment.
       4. Navigation, with keyboard and mouse.
       5. Currently, switched off Scrollbars, those require extension to 
           TBrowse, your opinion ?
       6. Fonts.

    ; SHOULD WE ADD:
       1. Support for scrollbars ? Will need :goTopBlock like implementation.
       2. Right Side Freezing ?
       3. Extended colors in :colorSpec, like in GETs ?
       4. ???

2012-12-21 18:48 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetlist.prg
    % Formatting.

  * hbqtwidgets/hbqtwidgets.hbp
    + Added: hbqtcolumn.prg

  + hbqtwidgets/hbqtcolumn.prg
  * hbqtwidgets/hbqtbrowse.prg
    + Implemented: basic functionality.
       Please look at tests/browse.prg and see the only difference:
        oBrowse:navigationBlock(). It simulates the inkey() loop. 

  * hbqtwidgets/hbtoqt.ch
    + #xtranslate Alert( => HbQtAlert( 

  * hbqtwidgets/tests/browser.prg
    + Tuned a little to eliminate inkey() loop.
       Otherwise it is exactly the same as in harbour/tests/tb1.prg

  ; So, ...

2012-12-21 13:16 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetsys.prg
    ! Fix [Minor] to honor GETs outside of GET system.

  * hbqtwidgets/tests/validator.prg
    + Extended: OOPLayout() function to demonstrate the use of 
       multiple layouts with HbQtGet()s spread on them. 
       This technique can be used organize GETs verically and 
       horizontally. Note that navigation will follow the creation 
       order, so be carefull.

2012-12-20 23:44 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetlist.prg
  * hbqtwidgets/hbqtgetsys.prg
    ! Fixed: FocusOut was still using a left-over and was causing 
       validation taking effect on focus out also. 
    ! Changed: behaviour of ESCape key, it is now passed onto parent 
       to take default action. Until now ESC was resetting the GET buffer
       to :original.
    
    ; Thanks Nenad for exactly pin-pointing to the above issues with 
       a suitable concise example.

2012-12-20 19:05 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtbrowse.prg
  * hbqtwidgets/tests/browser.prg
    % Advances: HbQtBrowse() - Work-in-Progress.

2012-12-20 15:48 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/tests/harbour.png
    + Harbour Logo.

  * hbqtwidgets/hbqtalert.prg
    % Minor.

  * hbqtwidgets/hbqtgetlist.prg
  * hbqtwidgets/hbqtgetsys.prg
  * hbqtwidgets/hbqtstd.ch
    + Extended: QREAD [ [ PARENT ] <GetParent> ] [ FONT <oFont> ] [ LINESPACING <nSpc> ] 
                      [ TITLE <title> ] [ ICON <icon> ] [<nomodal:NOMODAL>] [ PROPERTIES <prop> ]
       <title>   string to show up in the title-bar of the parent window.
       <icon>    string or QIcon to set for parents title-bar.
       <nomodal> logical to set the GETs window modeless.

       NOTE: all above parameters are applied to the parent if no parent is 
             supplied with [PARENT] clause. If QREAD is issued with oParent,
             then it is programmers responsibility to configure as per his/her taste.

       <prop>    code block to set the properties of the parent window.
                 The block is executed passing two arguments; 
                   1. oParent
                   2. oGetList
                 This facilitates to set any property Qt provides for the GET dialog.
                 This raises the bar for the programmer but still offering utmost 
                 simplicity for console programmers.

       NOTE: <prop> code block is called for every type of parent hosting the GETs.

  * hbqtwidgets/tests/pureclip.prg
  * hbqtwidgets/tests/validator.prg
    + Demonstrated the usage of above implementation.

2012-12-20 13:35 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/hbtoqt.ch
    + Commands translating @...QSAY...QGET... => @...SAY...GET...
       This facilitates to quickly port your existing forms without 
       any extra effort. Even with a directive, you will be able to 
       switch the interface, like...
         #ifdef __VIAQT__
           #include "hbtoqt.ch"
         #endif
          
         @ SAY GET...

  * hbqtwidgets/hbqtwidgets.hbp
    + -instfile=inc:hbtoqt.ch

  * hbqtwidgets/tests/pureclip.prg
  * hbqtwidgets/tests/validator.prg
    + Included: hbtoqt.ch and commands normalized to Harbour standards.

2012-12-20 09:09 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetlist.prg
  * hbqtwidgets/tests/validator.prg
    ! Fixed: oGetList:setFocus( cGet ) was not checking the type of <cGet>.

2012-12-20 02:17 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtstd.ch
    % GetList sent with @ operator.

  * hbqtwidgets/hbqtgetsys.prg
    + Implemented: SetKey() functionality.

2012-12-20 01:22 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbqtwidgets/hbqtwidgets.hbx
    * Regenerated.

  * hbqtwidgets/hbqtgetlist.prg
  * hbqtwidgets/hbqtgetsys.prg
    + Refined: the behavior of ACTION clasue of PUSHBUTTON.
       If ACTION returns a name of a GET then it is brought to 
       focus. If NIL is returned, it takes usual course to next GET.
       Probably, this solves remaining issues pertaining to 
       validation per GET or per form.

  * hbqtwidgets/tests/pureclip.prg
    % Demonstrates the ACTION clause usage.

2012-12-19 23:36 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/tests/pureclip.prg
    ! Fixed: process termination issue.
       Infact oWidget:close() should be called instead of :sendEvent().

2012-12-19 22:57 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetlist.prg
  * hbqtwidgets/hbqtstd.ch

  + hbqtwidgets/tests/pureclip.prg
    + Added: a pure clipper implementation demo.
       Note: closing the dialog with X button terminates the process properly.
             But closing via <Cancel> button keeps the process running. Looking...

  * hbqtwidgets/tests/validator.prg
    + Added: pure clipper implementation as 4th button.

  * hbqtwidgets/tests/validatormain.ui
    % Minor.

2012-12-19 19:05 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/hbqtbrowse.prg
  * hbqtwidgets/hbqtwidgets.hbp
    + Added: HbQtBrowse( nTop, nLeft, nBottom, nRight, oParent, oFont )
       A class to simulate TBrowse() object in pure GUI [Work-in-progress].

  * hbqtwidgets/hbqtalert.prg
    + Extended: HbQtAlert( <xMessage>, [<aOptions>], [<cColorNorm>], [<nDelay>], [<cTitle>], [<nInit>], [<oParent>] ) 
       [<oParent>] == The window you wish to center the alert dialog.
         By default it will be QApplication():focusWidget().

  + hbqtwidgets/tests/browser.prg
    + Added: demo application demonstrating HbQtBrowse() functionality.
       [Work-in-progress]

  * hbqtwidgets/tests/validator.prg
    % Minor.

2012-12-19 16:57 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtalert.prg
    + Extended: HbQtAlert( <xMessage>, [<aOptions>], [<cColorNorm>], [<nDelay>], [<cTitle>], [<nInit>] ) 
        [<nInit>] == Positions the focus on aOption[ nInit ].

  * hbqtwidgets/tests/validator.prg
    + Added arguments to HbQtAlert() call to demonstrate the usage.

2012-12-19 15:10 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtwidgets.hbx
    * Regenerated.

  * hbqtwidgets/hbqtgetlist.prg
    + Added: __hbqtRgbStringFromColorString( cToken, lExt ) -> cRgbFuncCall
    + Added: __hbqtCSSFromColorString( cColor ) -> cColorsCSS 

  * hbqtwidgets/hbqtalert.prg
    + Extended: HbQtAlert( <xMessage>, [<aOptions>], [<cColorNorm>], [<nDelay>], [<cTitle>] )
        <xMessage>     == String or Array of message lines.

        [<aOptions>]   == Standard Harbour Argument

        [<cColorNorm>] == Standard Harbour Argument

        [<nDelay>]     == Seconds. Will return the option-in-focus.
          QUESTION: should it return 0 ?

        [<cTitle>] == Title to be displayed on titlebar, "Alert!" is the default.

    + Implemented: focus rectangle to be positioned on option-in-focus.

  * hbqtwidgets/hbqtgetsys.prg
    ! Used ned functions and deleted method call.

  * hbqtwidgets/tests/validator.prg
    + Added arguments to HbQtAlert() call to demonstrate the usage.

2012-12-19 08:53 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetsys.prg
    + Implemented: placing a focus rectangle around GET in focus.
       This eliminates the need of any hack applied to recognize 
       where the user is at any given point of execution.

    + Implemented: @ ... CHECKBOX now accepts TtFfYyNn keystrokes in      
       addition to SPACEBAR to toggle the state. TtYy will mark it 
       and FfNn will uncheck. SPACEBAR toggles the state.
       This facilitates CLIPPER like behavior and eliminates the need 
       of using mouse.

    ; With this current phase of GET system compatibility is over.
       If you have any issues or functionality refinements, please 
       speak. 

    ; NEXT: TBrowse() implementation.

2012-12-18 22:47 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetlist.prg
  * hbqtwidgets/hbqtgetsys.prg
  * hbqtwidgets/hbqtstd.ch
  * hbqtwidgets/tests/validator.prg
    + Implemented: @ ... QGET ... [TOOLTIP <cTip>]

2012-12-18 17:17 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtalert.prg
  * hbqtwidgets/hbqtgetsys.prg
  * hbqtwidgets/hbqtstd.ch
  * hbqtwidgets/tests/validator.prg
    + Implemented: @ <top>, <left>, <bottom>, <right> QGET <v> ;
                     COMBOBOX <items> [WHEN ...

                 : @ <row>, <col> QGET <v> CHECKBOX [WHEN...

    ; QCheckBox styling needs more investigation. If anyone has 
       clues please forward.

2012-12-18 09:04 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/hbqtevent.prg
    + Added: hbqt_qtEventToHbEvent( oKeyEvent )
               Converts Qt key strokes to inkey() equivalent.
             hbqt_hbEventToQtEvent( nInKey )
               Converts inkey() key strokes to Qt equivalent.

  * hbqtwidgets/hbqtalert.prg
    + HbQtAlert() buttons can be activated by pressing first letter.

  * hbqtwidgets/hbqtgetsys.prg
  * hbqtwidgets/hbqtwidgets.hbp
    ! Fixes to navigation protocol. Were breaking QFormLayout GETs.

  * hbqtwidgets/hbqtwidgets.hbx
    * Regenerated.

  * hbqtwidgets/tests/validator.prg
    ! Minor.

2012-12-17 19:01 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets/hbqtalert.prg
    + Replacement to alert() - HbQtAlert( cMsg, aButtons ).
       Still I am not satisfied with color management, suggessions ?

  * hbqtwidgets/hbqtgetsys.prg
    % Many improvements in navigation.
      Code normalization.

  * hbqtwidgets/hbqtstd.ch
  * hbqtwidgets/hbqtwidgets.hbp
    + Implemented: @ <top>, <left>, <bottom>, <right> QGET <v> ;
                     PUSHBUTTON <label> [ACTION <act>] [WHEN ...

  * hbqtwidgets/tests/validator.prg
    + Demo code to utilize @...PUSHBUTTON.

2012-12-17 09:15 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetsys.prg
  * hbqtwidgets/hbqtstd.ch
  * hbqtwidgets/tests/validator.prg
  * hbqtwidgets/tests/validatorgets.ui
    + @ ... QGET ... PUSHBUTTON ... [ A work-in-progress ]

2012-12-16 21:41 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
  * hbqtwidgets/hbqtgetsys.prg
    % Cleaned some residuals.

2012-12-16 19:31 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  - hbqt/tests/validator.hbp
  - hbqt/tests/validator.prg
  - hbqt/tests/validatorgets.ui
  - hbqt/tests/validatormain.ui
  * hbqt/tests/hbmk.hbm
    - Transferred: validator.hbp++ to hbqtwidgets/tests
    
  + hbqtwidgets/tests
  + hbqtwidgets/tests/hbmk.hbm
  + hbqtwidgets/tests/validator.hbp
  + hbqtwidgets/tests/validator.prg
  + hbqtwidgets/tests/validatorgets.ui
  + hbqtwidgets/tests/validatormain.ui
    + Transferred: from hbqt/tests.
    
  * hbqtwidgets/hbqtgetlist.prg
  * hbqtwidgets/hbqtgetsys.prg
  * hbqtwidgets/hbqtstd.ch
    + Implemented: 
        @ <top>, <left>, <bottom>, <right> QGET <v> MEMOEDIT ...
        @ <top>, <left>, <bottom>, <right> QGET <v> LISTBOX <items> ...
                   
        QSET GETSFONT [TO] <oFont>      => HbQtSet( _QSET_GETSFONT   , <oFont>   )
        QSET LINESPACING [TO] <nPixels> => HbQtSet( _QSET_LINESPACING, <nPixels> )
        QSET NOMOUSABLE [TO] <lMouse>   => HbQtSet( _QSET_NOMOUSABLE , <lMouse>  )
        
        @ ... QGET ... COLOR <ClipperNotation|HexNotation|RGBNotation> : 
                             <"N/W*"|"#FF07C5/#CC345B"|"rgb(255,255,210)/rgb(110,100,255)">

    ; Work-in-progress for other controls. Demo is updated to contain 
      new controls. Please test.

2012-12-14 08:57 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump to r94.

2012-12-14 08:42 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtstd.ch
    % Refined some commands.

  * hbqtwidgets/hbqtgetsys.prg
    + Prepared to honor different type of objects than QLineEdit alone.
       A work-in-progress.

  * hbqt/tests/validator.prg
    ! Fixed to release the memory when windows are closed.

2012-12-13 15:49 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/qth/QFormLayout.qth
    + Uncommented some left-out methods in :addRow().
       Discovered by Dusan Majkic, thanks.

2012-12-13 13:09 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_hbqvalidator.cpp
  * hbqt/qtgui/hbqt_hbqvalidator.h
  * hbqt/qtgui/qth/HBQValidator.qth
    ! Fixed: syntactical issue where :fixup block was wrongly interpreted 
       and assigned. Thanks to Luigi Ferraris for spotting the issue.

2012-12-12 18:43 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetsys.prg
    Many synchronizational changes.

  * hbqt/tests/validator.prg
    + Added: use of UDFs in GET system.

2012-12-12 17:24 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_init.cpp
    + Implemented: hbqt_findChild( oParent, cChildObjectName, cObjectCast )
       hbqt_findChild( oWnd, "Catalog", "QLineEdit" ) -> oLineEdit

2012-12-12 14:38 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/environ.prg
    ! Fixed: PATH setting in .sh was using Windows specific notation.
       Thanks Jadiel for the tip.

2012-12-11 18:17 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/hbmk2_qt.hb
    ! A fix for :setText() when multiline text is initiated via Qt Designer.

  + hbqtwidgets/hbqtgetlist.prg
  * hbqtwidgets/hbqtgetsys.prg
  * hbqtwidgets/hbqtwidgets.hbp
    + Separated: HbQtGetList() class in its own source.

  + hbqt/tests/validator.hbp
  + hbqt/tests/validatormain.ui
  + hbqt/tests/validatorgets.ui
  * hbqt/tests/validator.prg
    + Added: main window and window displaying GETs consumed by GET
       subsytem.

  ; All is self explanatory. Few tweaks are remaining, tomorrow.
     Guys, be ready to enter a vast world of GUI with time-tested 
     GET system.

2012-12-11 12:36 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetsys.prg
    ! One more small fix in decimal handelling.

2012-12-11 07:05 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetsys.prg
    ! Fixed: jump to decimal point if picture is "@E".

2012-12-10 19:11 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqtwidgets/hbqtgetsys.prg
  * hbqtwidgets/hbqtstd.ch
    + Prepared: to be embedded with Qt Designer created .ui widgets.
       Hopefully by tomorrow a basic implementation will be in place.
       Many ideas and protocols are evolving. Idea is to have this 
       integrated with Harbour GET System isolated or/and with .ui
       widgets.

  * hbqt/tests/validator.prg
    % Adjusted to take effect sub-system changes.

2012-12-10 14:36 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbqtwidgets
  + hbqtwidgets/hbqtgetsys.prg
  + hbqtwidgets/hbqtstd.ch
  + hbqtwidgets/hbqtwidgets.hbc
  + hbqtwidgets/hbqtwidgets.hbp
  + hbqtwidgets/hbqtwidgets.hbx
    + Added: hbqtwidgets library which will host the components based on 
       pure HbQt. This, the first, components is Harbour's GET sub-system 
       usable in HbQt with pure GUI widgets. HbQt GET System almost 
       simulates the Harbour GETs with <SAY>, <VALID>, <WHEN>, 
       <PICTURE>, <COLOR> clauses at the minimum required to port 
       console mode Clipper code to GUI. In addition provides the 
       extended VALIDation protocol. 

       In the coming days, Harbour's powerful GET system is scheduled 
       to be integrated with Qt Designer designed widgets. A working 
       prototype is in place but needs a bit more work to be committed.

  * qtcontribs.hbp
    + Added: hbqtwidget library.

  * hbqt/qtgui/hbqt_hbqvalidator.cpp
    * Cleanup.

  * hbqt/tests/hbmk.hbm
    + Added: hbqtwidgets.hbc

  * hbqt/tests/validator.prg
    - Removed: code specific to hbqtwidgets library.

  ; To use HbQt GET System you will need to link hbqtwidgets library 
      with your project. Add a line to your.hbp : hbqtwidgets.hbc.

2012-12-09 12:50 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    ! mainly code clean-up, removed redundancy.

2012-12-09 02:05 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_hbqvalidator.cpp
    ! Small fix.

  * hbqt/tests/validator.prg
    + Many, many, many improvements.
       In nutshell, the engine is rewritten to overload Harbour's
       GET sub-system and encapsulate it in its entirety. All 
       GETs related functions are working, e.g., GetActive():varGet()/Put().

     + @ ... QSAY ... QGET ... is functional.
     + PageUp/Dn navigates to First and Last gets.
     ! VALID is not evaluated if WHEN could not been validated.
     + Array GETs are working.

     ; Please test and report differences.

2012-12-07 01:27 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    + Demonstrated: how a Clipper form can be executed in a scrollable
       widget. Resize the window and experience how scrolling is working.
       This way we can present much larger forms then a typical Clipper
       screen could offer. 

    + Implemented: "@E" and "@Snn" PICTURE functions.

2012-12-06 18:56 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    + Implemented: ROW/COL properties of GETs.

    + Implemented: @ <nRow>, <nCol> QSAY <exp> PICTURE <pic> COLOR <clr>.
       COLOR is not yet implemented, needs discussion.

    + Implemented: Clipper like form creation with @ SAY, @ GET commands
       given a parent window without any layout. 

    + Implemented: support of QFont to be applied to SAYs and GETS.
       This automatically sets the size and 

    ! Made: Clipper like form the startup display mode. Send "P" as 
       parameter to invoke OOP code screen.

    ; NOTE: we are almost near to design a GUI screen with Clipper code.
            QFont supplied to the form is not set on parent window. It is 
            applied only to SAYs and GETs. The rows are calculated on the 
            basis of QFont:height() and each row is separated by 6 pixels.

    ;       This seems, the whole protocol can be enhanced to a greater 
            horizon with a possibility to have multiple forms in one window.

2012-12-06 09:26 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

2012-12-06 08:59 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    % Organized the code to honor deep level of Clipper GET System
       taking use of Get and HbGetlist Classes effectively.
    + Implemented: GET is never exited even with mouse if it could 
       not been validated. [ TODO: should be switchable on user request ].

2012-12-05 18:09 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    + Implemented: real-time validation indication in the form of 
       change in background-color of edit instance. The Clipper variable 
       is only updated if RETURN or TAB is pressed, just like Clipper.
    + Matured: numeric GET entry protocol. In some ways it is better 
       than Clipper's. PICTURE clause is completely supported.

    ; NOTE: with this basic implementation of Harbour GET System is 
            complete. Please test with your in-production code, if possible.
            If you find differences, please report. Also it will be 
            helpful if you supply some complex PICTURE clauses used 
            in your applications to be added to this demo code.

    ; OPINION: seems this class can be entirely ported to C++ as HBQGet.
               Should it remain as PRG class or be shifted to C++ ?

    ; NEXT: class/code to generate a data-aware form encapsulating
            @ <nRow>,<nCol> SAY <exp,...> GET <exp,...>.

2012-12-05 08:49 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    % Many improvements. Thanks Maurizio for helping.
       Still some visual artifacts need be covered in numeric GETs.
   
2012-12-05 08:49 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_hbqvalidator.cpp
  * hbqt/qtgui/hbqt_hbqvalidator.h
  * hbqt/qtgui/qth/HBQValidator.qth
  * hbqt/tests/validator.prg
    + Changed: HBQValidator( <bValidate> [, <bFixup>] ).
       the class now accepts two blocks instead of one. Second block is to 
       enforce QValidator:fixup() method. The block receives the 
       text of editing buffer and can be changed in the the PRG source.
    + Implemented the use of :fixup() method.
    + many enhancements in GET system overall, please test.

2012-12-04 09:39 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    ! More complete picture clause in numeric GETs.
    % Rearrangement of code for better usage.

2012-12-04 01:57 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    + Implemented: Templates for Numeric GETs, please test.
       VALID is broken if value of a numeric GET is invalid and focus 
       is placed on another object with mouse-click and then returned 
       to numeric GET. I am at a loss to understand the behavior of 
       QValidator in this respect as why it receives :Intermediate
       return and then never set it back.

2012-12-03 19:02 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    + Implemented: GET Picture Templates in addition to Picture Functions.
    + Implemented: Numeric GET "+-." positioning, confirmation to pre
       and post decimal width. Currently based on variables original value.
       ;
       TODO: implementation of Picture Teplates.
    + Completed: Date GET implementation. Now it supports Set( _SET_DATEFORMAT ).
    + Implemented: mouse support as default. To switch off the mouse interaction
       call oEdit:mousable := .F. .
    + Implemented: changed background color to somewhat red of any GET if 
       if focus is taken away from it by mouse action and the value 
       contained in the edit buffer could not been validated with VALID 
       clause. This is a visual only part and actual VALID is performed
       only by keyboard navigation.
    + Added one more field "Telephone Number:" which facilitates the 
       verification of template part of picture.

    ; Please test extensively and report back if you see any issues with 
       GET picture with/without template part.

2012-12-03 09:32 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    + Logical: always remains selected, so edit does not need backspace.
    + Numeric: right aligned if picture function does not contain "B".
    + ESC: form is closed if ESCAPE is pressed.
    + :inputValidator is called after respecting picture clause.
    ! Picture function "K" is the default behavior except is LOgicals. 
       And this is the preferred way in GUI.

2012-12-01 21:20 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    + Applied: "Courier New" size 10 font on HbQtGet() objects.
       It offers better input experience much like Clipper.

  * hbxbp/browse.prg
    ! Fixed: long-standing bug in IdeDBU where CTRL+PgUp/Dn were 
       nor refreshing the contents of rows.

2012-12-01 19:07 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    + Implemented: @ <nX>, <nY> QGET <v> PICTURE <pic> COLOR <color> ;
                     WHEN <when> VALID <valid> VALIDATOR <validator>;
                     CAPTION <cap>

                   QREAD

       This implementation demonstrates how Clipper code can be 
       re-used in GUI environment. The implementation demonstrate 
       both, OOP and COMMAND syntax usages. Execute validator.exe 
       with "p" as parameter to invoke COMMAND code.

       Presently suppoted PICTURE strings are "@!" for character 
       and "Y" for logicals. Others will come up next.

       COLOR clause supports Cliiper's standard 16 colors. It can be 
       passed as "W+/B",   "B",    "W+/BG*", i.e., foreground/background
       pair. Only one color will be applied to text color.

       Data binding is implemented via :dataLink( bBlock ) method.

       For COMMAND syntax, to fetch set/get block, Harbour's 
       GET system is used. Hope it can be exploited further.

2012-12-01 02:41 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/validator.prg
    + Updated: to confirm to Clipper Get System with WHEN and VALIDS.
       The code hosts a small class inherited from QLineEdit which 
       controls the edit behavior of gets both per navigation and 
       input standards. ENTER and UP/DOWN arrows also behave 
       per Clipper standards. The implementation completely by-pass 
       mouse input, i.e., no edit is selectable with mouse click.
       This was required to implement WHEN and VALID.

       The class is still a work in progress. As I am feeling tired 
       and also it is almost morning, I need to sleep. In the meantime
       examine the code and post your views/opinions/suggestions/whatever.
       Also keep in mind to suggest where such classes, which simulate,
       Clipper behavior, should be hosted.

2012-11-30 14:43 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_hbqvalidator.cpp
    % HBQValidator block returning QValidator:Intermediate if the supplied 
       text is empty. This is always the case when edit object is 
       presented for input the first time. Also it relieves the programmer
       to implement it on every GET manually.

2012-11-30 13:12 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_hbqvalidator.cpp
    + Implemented: QValidator::Intermediate return value.
       HOW: If the validating function return NIL as sole return-value 
              OR
            NIL as third element of returned array;
            QValidator::Intermediate is returned back to QValidator::validate().

2012-11-29 12:51 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqt_hbqvalidator.cpp
    % Small fix to pass validation text to PRG callback as per STR API protocol.

2012-11-28 23:34 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbqt/qtgui/qth/QLineEdit.qth
    % Marked [*D=1*] for :setValidator().

  + hbqt/qtgui/qth/HBQValidator.qth
  * hbqt/qtgui/qth/filelist.hbm

  + hbqt/qtgui/hbqt_hbqvalidator.cpp
  + hbqt/qtgui/hbqt_hbqvalidator.h
  * hbqt/qtgui/hbqtgui.hbm
  * hbqt/qtgui/hbqtgui.hbx
    + Added: HBQValidator() sub-class inheriting QValidator().
       This facilitates to simulate Harbour Get System's input behavior, 
       primarily in relation to picture clause at the minimum. But it 
       is much more then that. A clever use can put you under total 
       control what exactly you want the user to input.

       SYNTAX:  oEdit := QLineEdit( oWnd )
                oEdit:setValidator( HBQValidator( {|cText, nPos| DoValidation( cText, nPos ) } ) ) 

       RETURN VALUE OF VALIDATION BLOCK:
                It is important to understand the rationale of return 
                value of code-block supplied as only parameter to 
                HBQValidator which controls the behavior of validation.
                This can be one of the following:

                1. NIL     : will be treated as input is valid.
                2. .T.     : will be treated as input is valid.
                3. .F.     : will not allow the current character.
                4. String  : will replace the input string with returned string.
                5. Numeric : will relocate the editing cursor to this position.
                6. Array   : { cModifiedText|NIL, nCursorPos|NIL, lValid|NIL }
                             the elements corresponds to above #4, #5, #1;2;3

  + hbqt/tests/validator.prg
    + Added: a demonstration appln consuming HBQValidator() with 
       3 different constraints with many sub-variants which clearly 
       shows the power of this class. You can experiment further and 
       can add interesting combinations in this demo.

2012-11-26 11:43 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/docwriter.ui
  * hbide/docwriter.prg
  * hbide/harbourhelp.prg
  * hbide/misc.prg
    - Removed: $TESTS$ token from Ide Documentation Writer as per Harbour
       specifications. This token is removed all-over.

2012-11-19 12:27 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbide/saveload.prg
    ! Fixed: a nstry regression where QFontDialog() constructed with
        a parent was always returning parents font, no matter what 
        method you adopted. 

2012-11-16 22:09 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbide/docwriter.prg
    + Added: "Run time error" $TEMPLATE$ used in doc/en/subcodes.txt.

  ; Now all documentation files in doc/en/*.txt are loaded and saved 
    without any difference, except for where COMPLIANCE PLATFORMS FILES 
    order is changed. Content remain the same only order chages.

2012-11-16 19:54 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbide/docwriter.ui
    % Changed: Various QLineEdit()s with QPLainTextEdit()s to accomodate 
        multi-line help sections.

  * hbide/docwriter.prg
  * hbide/harbourhelp.prg
  * hbide/misc.prg
    ! Changed: to accomodate multi-line entries.
    + Added: comboBox on Documentation Writer's toolbar containing all the 
        function names within opened file. This facilitates to switch to 
        any function from within single load. Note that each function, 
        if modified, has to be saved before loading another.
    + Implemented: logic to retain the blank sections also if present 
        in the function body. This facilitates to have exact same content,
        except for the modified one, in the saved file.

  ; TOBE VERIFIED: 
    1. some harbour/doc/en/.txt files have different order 
       of 2 keywords as:  COMPLIANCE FILES PLATFORMS whereas majority of 
       documents have COMPLIANCE PLATFORMS FILES. 
       should these be fixed all together or when some is modified ?

    2. contrib/hbct/doc/en/*.txt do not contain TEMPLATE section 
       in any of the files. All are functions only.
       These need to be addressed all at once.

  ; DONE: Add "Run time error" template entry.

2012-11-16 07:31 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbqt/qtgui/hbqtgui.hbx
    + Added: QGesture++ functions.

2012-11-14 18:23 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbqt/qtgui/hbqt_init.cpp
    + Added: QGestureEvent handelling.

  * hbqt/qtgui/hbqtgui.ch
    + Added: constants for QGesture_++.

  * hbqt/qtgui/qth/filelist.hbm
    + Added: classes as per below.

  + hbqt/qtgui/qth/QGesture.qth
  + hbqt/qtgui/qth/QGestureEvent.qth
  + hbqt/qtgui/qth/QPanGesture.qth
  + hbqt/qtgui/qth/QPinchGesture.qth
  + hbqt/qtgui/qth/QSwipeGesture.qth
  + hbqt/qtgui/qth/QTapAndHoldGesture.qth
  + hbqt/qtgui/qth/QTapGesture.qth
    + Implemented: QGesture() API.

  * hbqt/qtgui/qth/QWidget.qth
    + Added: method :grabGesture().

  ; NOT TESTED. I do not have any touch-screen environments.
      Please do so if someone has and send the findings on the list.

2012-11-14 08:49 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbxbp/dbu.prg
    - Removed: local error handeler.

2012-11-12 19:20 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/main.prg
  * hbide/misc.prg
    + Demonstrated the use of QGraphicsEffect() when X button is pressed.

2012-11-12 18:56 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/hbqtgui.hbx
    + Added: new classes introduced today.

2012-11-12 18:33 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtcore/hbqt_init.cpp
  * hbqt/qtgui/hbqt_init.cpp
    + Added: more signals with qreal,QBrush,QPointF,BlurHints;
        needed for new added classes as per below.

  * hbqt/qtgui/hbqtgui.ch
    + Added: QGraphicsEffect_* + relevant constants.

  * hbqt/qtgui/qth/filelist.hbm
  + hbqt/qtgui/qth/QGraphicsBlurEffect.qth
  + hbqt/qtgui/qth/QGraphicsColorizeEffect.qth
  + hbqt/qtgui/qth/QGraphicsDropShadowEffect.qth
  + hbqt/qtgui/qth/QGraphicsEffect.qth
  + hbqt/qtgui/qth/QGraphicsOpacityEffect.qth
    + Added: Qt 4.6 introduced classes.

  * hbqt/qtgui/qth/QWidget.qth
    + Added: Qt 4.6 introduced method :setGraphicsEffect() exploiting 
        above classes.

  ; TODO: example code to be a part of hbqt/tests.
  ; DONE: implemented in HbIDE when X button is clicked to close.

2012-11-12 14:08 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbide/main.prg
    + Opened: left-hand side "Projects Tree" docking widget if HbIDE is 
       started with "HBP" mode as - hbide.exe myproject.hbp

  * hbxbp/dbu.prg
    + Added: "Natural Order" prompt in deop-down list of "Indexes" in HbpDBU.
        Requested by Massimo.

  * hbxbp/hbxbp.hbp
    ! Fixed: to transfer binaries in Harbour's lib folder.
        This had given me a lot of hedaches, thanks GVS for the hint.

2012-11-11 14:36 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbide/docwriter.prg
    ! Minor fix to prev commit.

2012-11-11 11:48 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbide/actions.prg
    ! Log standing bug fix in "Recent Files/Projects". Thanks Grzegorz.

  * hbide/docwriter.prg
    ! Fixed: to eliminate most of the pitfalls as per previous commit.

  ; WORKING:
    1. Now function name holds the key if a function documentation will be 
         replaced or added to the .txt file being modified. This means, 
         changing the name of the function will add an entry with new name.
         The match is case insensitive, i.e., WvgCheckBox() will be equal to 
         WvgCHECKbox().

    2. All the other upper entries are retained as is if some exist, i.e. like
         copyright notices or SVN header.

    3. Has eliminated the keyword $FUNCNAME$ from entire repository and 
         is replaced by $NAME$.

  ; USABILITY: it is recommended that now you use HbIDE to build / edit
               Harbour documentation. The tool is ready to go. 

2012-11-10 23:40 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbide/docwriter.prg
  * hbide/harbourhelp.prg
  * hbide/misc.prg
    + Implemented: HbIDE Documentation Writer updated to load/save 
       documentation from disk files with .txt extention. This will 
       facilitate the visual way to update Harbour documentation per
       Nanforum standards, which at present, is employed in Harbour 
       all-over.

    ; WORKING:
      Editing Existing Documentation:

        1. Click on "Load from .txt file" toolbar icon.
        2. If .txt contains many functions then a list will be presented 
             to select one.
        3. Make the necessary changes.
        4. Click on "Save written/updated documenttaion" toolbar icon.
        5. A confirmation message will be displayed if it is saved successfully.
       
      Creating New Documentation:

        1. Click on "Clear Foem" toolbar icon. Necessary only if you worked 
             on some other function previously.
        2. Fill in the fields.
        3. Click on "Save written/updated documenttaion" toolbar icon.
        4. FileSave dialog will be presented to obtain folder where to save.
             FileName will be auto-constructed from type and function name.
             You can keep it as is or change per your liking.
        5. A confirmation message will be displayed if it is saved successfully.
      
      Both ways SVN Id header will be placed on top of the documentation file.

    ; WHAT WE CAN LOOSE IF EXISTING DOCUMENTATION IS EDITED:  
        
        1. Copyright notices posted on top of the file.
        2. $COMPLIANCE$ is converted to $PLATFORMS$ and is only oneliner.
        3. If $COMPLIANCE$ and $PLATFORMS$ both are present then only 
             $COMPLIANCE$ is retained.
        4. Leading "*" will not be present
        5. may be more but I have observed above differences 
             while experimenting with harbour/doc/en/*.txt files.

2012-11-10 10:56 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbqt/qtcore/hbqtcore.ch
    + Added: QLocate_* constants representing languages.

2012-11-09 12:16 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Version bump.

  * hbqt/qtmultimedia/hbqtmultimedia.hbx
  * hbqt/qtnetwork/hbqtnetwork.hbx
  * hbqt/qtopengl/hbqtopengl.hbx
  * hbqt/qtscript/hbqtscript.hbx
  * hbqt/qtsql/hbqtsql.hbx
  * hbqt/qtsvg/hbqtsvg.hbx
  * hbqt/qtwebkit/hbqtwebkit.hbx
  * hbqt/qtxml/hbqtxml.hbx
    ! Converted: classnames from upper to camel case. [ Finished ].

2012-11-09 10:42 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    * As Ususal.

  * hbqt/qtcore/hbqtcore.hbx
  * hbqt/qtdeclarative/hbqtdeclarative.hbx
  * hbqt/qtdesigner/hbqtdesigner.hbx
  * hbqt/qtgui/hbqtgui.hbx
    ! Converted: classnames from upper to camel case.
       A work-in-progress.

  * hbqt/qtgui/qth/filelist.hbm
    ! Rearranged: class names. One was unorganized.

2012-11-08 15:35 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    + As Ususal.

  * hbide/main.prg
    - Removed: one double call to animate elements.
       It should reduce load time considerably on some OS's.

  * hbqt/hbmk2_qt.hb
    + Implemented: :setShortcut() property assignment via Qt Creator.

2012-11-06 14:34 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
  * hbide/themes.prg
    ! Fixed: bound-error checking reported by Alain.

2012-11-05 13:42 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/changelog.ui
  * hbide/docviewgenerator.ui
  * hbide/docwriter.ui
  * hbide/editor.ui
  * hbide/environ.ui
  * hbide/environments.ui
  * hbide/fetchdate.ui
  * hbide/finddialog.ui
  * hbide/findinfiles.ui
  * hbide/findinfilesex.ui
  * hbide/findsource.ui
  * hbide/format.ui
  * hbide/funclist.ui
  * hbide/mainwindow.ui
  * hbide/managetoolbox.ui
  * hbide/panels.ui
  * hbide/projectpropertiesex.ui
  * hbide/projectwizard.ui
  * hbide/searchreplace.ui
  * hbide/searchreplacepanel.ui
  * hbide/selectionlist.ui
  * hbide/selectproject.ui
  * hbide/setup.ui
  * hbide/shortcuts.ui
  * hbide/skeletons.ui
  * hbide/themes.ui
  * hbide/themesex.ui
  * hbide/toolsutilities.ui
  * hbide/updown.ui
  * hbide/updown_v.ui
    + Wrapped: with style sheet having font 8pt Arial.
       This solves the font issue with various dialogs on different OSes.

2012-11-04 21:50 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    ! Revision Bumped.

  * hbide/setup.ui
    + Added: stylesheet with "font: 8pt Arial".
       Experimental: hopefully it will resolve distorted dialog issue on *nixes.

  * hbqt/hbmk2_qt.hb
    ! Fixed to parse :setStyleSheet() call properly.

  * hbqt/qtgui/hbqtgui.ch
    + Added: yet not usable constants to honor QGesture and QTouchEvent(s).
 
2012-11-01 09:10 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
  * hbide/saveload.prg
    ! Fixed: RTE reported by Maurizio. 
    ; NOTE: this functionality has been discontinued.

2012-10-25 14:12 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/tests/cls_dbstruct.prg
  * hbqt/tests/dbstruct.prg
    % Changed: class name symbolizing the .ui manipulation in HbIDE interface
       from ui_* to uie_*. This was documented in ChangeLog but I forget 
       to update the demo project files.

2012-10-24 16:27 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    * Usual: last commit info.

  * hbide/requests.ch
    + Added: missing codepages from prev commit.

2012-10-24 15:12 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    * Usual: last commit info.

  + hbide/requests.ch
    + Added: header to REQUEST all codepages Harbour supports.
       Just in case...

  * hbide/actions.prg
  * hbide/docks.prg
  * hbide/editor.prg
  * hbide/main.prg
  * hbide/misc.prg
  * hbide/saveload.prg
  * hbide/sources.prg
    + Added: <Main Menu><Encoding> option.
       It displays the codepages in this notation: 
         Harbour Codepage Name : Unique Codepage ID => "RU866 : cp866"

    + Implemented: per source Harbour supported codepage.
       Now you can write sources supporting different code pages for 
       strings inside source text. Each edit instance can have its own 
       codepage which can be selected from <Encoding> main-menu option.
       HbIDE remembers codepage associated with a source. When selecting 
       a codepage from <Encoding> option, you will be prompted to set 
       it as "default". The <Default> codepage will be applied to any 
       new source brought to HbIDE for editing. 

    ; IMPORTANT : Please read
       1. Setup this current commit or release.
       2. DO NOT execute HbIDE.
       3. Open hbide.ini you are supplying to execute HbIDE.
       4. Change: CurrentCodec=_HarbourCodePageName_ => 
                  CurrentCodec=EN
       5. Execute HbIDE.
       6. Notice the statusbar of HbIDE where codepage entry should be 
            visible as "Enc: EN | EN".
       7. First part denotes codepage of this source, second part 
            default codepage.
       8. If you need to change the codepage of a source, make sure that 
            it has not been modified before the change, initiate change 
            from <Encoding> option, close HbIDE, do not save the source 
            when prompted, run HbIDE again. This action can be taken for 
            multiple source instances. Just REMEMBER that you have not 
            to save the source after changing the codepage.

    ; THANKS : Special thanks to Grzegorz and Maurizio for helping me 
               understand what is happening under the hood.

      Please make extensive tests. Regression is possible.
 
2012-10-24 14:31 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + Applied patch by Francesco Perillo (as explained below), thank you.

  * qtcontribs.hbp 
    ! all not-essential Qt modules are remmed by default. 
      You need to remove the remark if you want them to be compiled. 
      Too much problems reported for aborted builds. In the future we may 
      add checks and skip modules missing include files, for the moment it 
      will be programmers responsability to un-rem them
    + added -hbcontainer so that the error line about nm is not shown

  * hbide/hbide.hbp
    ! added instpath to current harbour BIN path. This means that hbide 
      will be copied in the same directory where harbour executable is ! 
      This will work both for simple "make" and for "make install"
    ! modified output dir that is anyway replaced by instpath directive

  * hbxbp/hbxbp.hbp
    + added $hb_pkg_install.hbm
    ! changed path for lib creation

  * hbxbp/hbxbp.hbc
    + added libpaths directive. This adds a new lib directory so the linker 
      can find the files created in the path set in hbxbp.hbp file

  * hbqt/hbqt_common.hbm
    ! changed lib target directory
    + copied $hb_pkg_install.hbm content and modified to fit hbQt build method. 
      the standard hbm file uses lib name to create a subdir where to store its 
      files during install. This is ok for simple libraries like hbxbp, 
      where only one lib is created, while it is a problem for hbQT where several 
      libraries are created... otherwise we would get addons/hbqtcore addons/hbqtgui. 
      no way....  So the changes was just to set hbqt as target directory, 
      all the rest unmodified...

  * hbqt/hbqt.hbc
    + added libpaths directive. This adds a new lib directory so the linker 
      can find the files created in the path set in hbqt_common.hbm file

2012-10-14 13:05 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    * Usual: last commit info.

  * hbide/actions.prg
    ! Fixed: "New" icon on the toolbar was not working due to spells.

  * hbide/sources.prg
    ! Fixed: adding a source through "New" menu or toolbar option was 
       asking for the file location twice.

  * hbxbp/filedialog.prg
    ! Changed: XbpFileDialog():saveAs() consuming QFileDialog's 
        static function instead of old-fashioned dialog. 
        This fixes the issue where default file name was not populated 
        in the filename field.

2012-10-14 00:35 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    * Usual: last commit info.

  * hbxbp/browse.prg
  * hbxbp/dbu.prg
    ! Fixed: nasty visual artifacts in XbpBrowser() where columns were 
       not displayed in synchronization with navigation and viewport
       coordinates. Also vertical navigation with page-up/down was 
       behaving erratic sometimes. Please review me.    

2012-10-13 18:47 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    * Usual: last commit info.

  * hbide/actions.prg
  * hbide/main.prg
    ! Fixed: firing of "Launch Project" action twice.

2012-10-13 14:39 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * Added: SVN Properties.
     Please report if any file is having different than required properties.

2012-10-13 14:07 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbxbp/dbu.prg
    ! Fixed: a nasty bug that was crashing IdeDBU.

2012-10-13 13:02 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbxbp/browse.prg
  * hbxbp/generic.prg
    ! Fixed: Same value XBP constants clubbed in one SWITCH statement.

2012-10-13 09:51 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    * Reflects: r30 - the one last.

2012-10-13 09:39 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbxbp/hbxbp.hbx
    * Leftover from prev commit.

2012-10-13 09:26 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  - hbide/xbpaddons
    - Moved: to hbxbp where these belongs.
  * hbide/hbide.hbp
    - Removed: entries specific to xbpaddons lib.
  * hbide/hbide_v.ch
    * Auto generated.
  * hbide/projmanager.prg
    * Minor.
    
  + hbxbp/resources
    + All *.png resources.
  + hbxbp/dbu.prg
  + hbxbp/hbpdbstruct.ui
  + hbxbp/hbpfetchdate.ui
  + hbxbp/hbptables.ui
  + hbxbp/misc.prg
  + hbxbp/reports.prg
  + hbxbp/xbp.qrc
  
  * hbxbp/hbxbp.hbp
    + Added: moved files from hbide/xbpaddons.

2012-10-08 14:09 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbide/hbide_v.ch
    + Readded: the header containing latest revision number.
       This is done because otherwise HbIDE cannot be built by a 
       user who has not properly set QtContribs build environment,
       which, along other things, require subversion client installed
       on his machine. Mostly it will never be required for average user 
       but just in case...

       NOTE: this will always publish one revision less than the current 
             in HbIDE title-bar.

2012-10-08 12:38 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/edit.prg
  + hbide/qtcore.txt
  + hbide/qtgui.txt
  + hbide/qtnetwork.txt
    + Added: not-on-qt-sources dependent functions list of HbQt modules.
       Has been a constant source of building HbIDE on folders which 
       are not in synch with HbQt folder locations. 

2012-10-08 07:36 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/dict.prg
  * hbide/main.prg
  * hbide/saveload.prg
    % Fixed: regression about duplicated CASE constants in SWITCH statement.

2012-10-08 01:24 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbxbp/generic.prg
    % Changed: one SWICH statement to DO CASE because Xbase++ defines 
      two alignment constants to "0" until I resolve this issue.

2012-10-07 17:01 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbxbp/appevent.prg
    ! Fix to prev fix.

2012-10-07 16:59 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbxbp/appevent.prg
    ! Fixed: commented-out duplicate key values generated by Xbase++
       for some xbeK_CTRL_* contstants.

2012-10-07 16:06 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbxbp/xbp.ch
    ! Fixed: some wrong constants.
       Thanks Przemek for introducing duplicate case constants compile 
       time check which could detect these type of error, something 
       rare to debug otherwise.

2012-10-07 15:34 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/hbmk2_qt.hb
    % Changed: the version guard agaisnt which a class is compiled.
       Earlier every class was guarded against v4.5.
       Now class is guarded against minimum of v4.5 or defined for 
       a class in .qth in CLASS section. 
         <CLASS> 
         ...
         Version = 0x040n00 
         </CLASS>
 
       This empowers HbQt engine to add any class comes with new version 
       of Qt.

2012-10-07 12:22 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtopengl/qth/QGLFramebufferObjectFormat.qth
    % Versionized: mipmap() and setMipmap() methods under [*V=0x040800*]

2012-10-06 02:23 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * qtcontribs.hbp
    + Added: SVN properties.
       May be absense of these was responsible to behave erratically on Linux.

2012-10-05 17:37 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/main.prg
    + Enabled: Codepage UTF-8 by default. 

  * hbqt/qtgui/hbqt_init.cpp
    ! Fixed: a nasty implementation belonging to UTF-8 codepage.
       "UTF8" => "UTF-8" 
       This caused unnecessary noise in the past.

2012-10-05 16:32 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide.hbp
    - Deleted: -vcshead=hbide_v.ch

  * qtcontribs.hbp
    + Added: -vcshead=hbide/hbide_v.ch

2012-10-05 14:35 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  - hbide/hbide_v.ch
    - Deleted: header to fetch SVN revision no. 

  * hbide/hbide.hbp
    + Added: -vcshead=hbide_v.ch
       This generates the hbide_v.ch at build time and is included in 
       main.prg and misc.prg.
    ; TODO: one common function to pull this info than at two places.

2012-10-05 12:09 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide_v.ch
    * Version change: always to last than current one. How to do ???

  * hbqt/qtcore/hbqt_bind.cpp
    ! Optimizations: in new protocol.

  * hbqt/tests/qtrevamp.prg
    5 Changed: Statics to locals.

2012-10-04 17:22 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtcore/hbqt_bind.cpp
    + Added: hbqt_bindAddConnected(), hbqt_bindDelConnected() functions.

  * hbqt/qtcore/hbqt_misc.prg
    + Added: class HbQtConnecteds().

    IMPLEMENTED: the objects having any signal connected to remain alive 
                 irrespective of the Harbour variable scope. Uptil now 
                 a :connect() to be functional, the variable holding the 
                 object had to remain in scope till the life of that 
                 connect's life-span. Now it is not needed. Below is 
                 the example ( hbqt/tests/qtrevamp.prg : snippet ):

                 STATIC FUNCTION BuildMenuBar( oWnd )
                    LOCAL oMenu1, oMenuBar
                 
                    STATIC oItemIns, oItemMod       /*****  STATICS ******/
                 
                    oMenuBar := QMenuBar( oWnd )
                 
                    oMenu1 := QMenu( oMenuBar )
                    //
                    oMenu1:setTitle( "&Options" )
                 
                    IF empty( oItemIns )
                       oItemIns := QAction( oWnd )
                       oItemIns:setText( "&MessageBox()" )
                       oItemIns:connect( "triggered()", {|| DlgMBox( "Yes" ) } )
                    ENDIF
                 
                    IF empty( oItemMod )
                       oItemMod := QAction( oWnd )
                       oItemMod:setText( "&ContextMenu()" )
                       oItemMod:connect( "triggered()", {|| ContextMenu( oWnd ) } )
                    ENDIF
                 
                    oMenu1:addAction( oItemIns )
                    oMenu1:addAction( oItemMod )
                 
                    oMenuBar:addMenu( oMenu1 )
                 
                    oWnd:setMenuBar( oMenuBar )
                 
                    RETURN NIL
    

               =>


                 STATIC FUNCTION BuildMenuBar( oWnd )
                    LOCAL oMenu1, oMenuBar
                 
                    LOCAL oItemIns, oItemMod         /***** LOCALS *****/
                 
                    oMenuBar := QMenuBar( oWnd )
                 
                    oMenu1 := QMenu( oMenuBar )
                    //
                    oMenu1:setTitle( "&Options" )
                 
                    IF empty( oItemIns )
                       oItemIns := QAction( oWnd )
                       oItemIns:setText( "&MessageBox()" )
                       oItemIns:connect( "triggered()", {|| DlgMBox( "Yes" ) } )
                    ENDIF
                 
                    IF empty( oItemMod )
                       oItemMod := QAction( oWnd )
                       oItemMod:setText( "&ContextMenu()" )
                       oItemMod:connect( "triggered()", {|| ContextMenu( oWnd ) } )
                    ENDIF
                 
                    oMenu1:addAction( oItemIns )
                    oMenu1:addAction( oItemMod )
                 
                    oMenuBar:addMenu( oMenu1 )
                 
                    oWnd:setMenuBar( oMenuBar )
                 
                    RETURN NIL



   ; WARNING:    The code using WITH OBJECT (xhb) implementation must declare a 
                 seperate variable for each object. For example:


                 FUNCTION ShowForm()
                    LOCAL oQtWin, oQtCent, oQtBtn
                    
                    WITH OBJECT oQtWin := QMainWindow()
                       :setObjectName( "MainWin" )
                       :resize( 600, 600 )
                       :setWindowTitle( "Testing" )
                 
                       WITH OBJECT oQtCent := QWidget( hb_QWith() )
                          :setObjectName( "centralWidget" )
                 
                          WITH OBJECT oQtBtn := QPushButton( hb_QWith() )
                             :setObjectName( "btn1" )
                             :resize( 100, 25 )
                             :move( 10, 10 )
                             :setText( "Premi qui" )
                             :connect( "clicked()", { || Qclicked() } )
                          END WITH
                 
                          WITH OBJECT oQtBtn := QPushButton( hb_QWith() )
                             :setObjectName( "btn2" )
                             :resize( 100, 25 )
                             :move( 10, 50 )
                             :setText( "Premi li" )
                             :connect( "clicked()", { || Qclicked1() } )
                          END WITH
                 
                       END WITH
                 
                       :setCentralWidget( oQtCent )
                    END WITH
                 
                    oQtWin:Show()
                 
                    RETURN oQtWin


               =>   


                 FUNCTION ShowForm()
                    LOCAL oQtWin, oQtCent, oQtBtn, oQtBtn_1
                    
                    WITH OBJECT oQtWin := QMainWindow()
                       :setObjectName( "MainWin" )
                       :resize( 600, 600 )
                       :setWindowTitle( "Testing" )
                 
                       WITH OBJECT oQtCent := QWidget( hb_QWith() )
                          :setObjectName( "centralWidget" )
                 
                          WITH OBJECT oQtBtn := QPushButton( hb_QWith() ) 
                             :setObjectName( "btn1" )
                             :resize( 100, 25 )
                             :move( 10, 10 )
                             :setText( "Premi qui" )
                             :connect( "clicked()", { || Qclicked() } )
                          END WITH
                 
                          WITH OBJECT oQtBtn_1 := QPushButton( hb_QWith() )
                             :setObjectName( "btn2" )
                             :resize( 100, 25 )
                             :move( 10, 50 )
                             :setText( "Premi li" )
                             :connect( "clicked()", { || Qclicked1() } )
                          END WITH
                 
                       END WITH
                 
                       :setCentralWidget( oQtCent )
                    END WITH
                 
                    oQtWin:Show()
                 
                    RETURN oQtWin

2012-10-04 00:45 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * ChangeLog
    + Added: SVN properties.

2012-10-04 00:41 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + hbide/managetoolbox.ui
    + Work-in-progress.

  + hbide/hbide_v.ch
    + Added: header created with hbmk2 -vcshead= option to change HbIDE
       revision number displayed on the title bar and about dialog.

  * hbide/main.prg
  * hbide/misc.prg
    % Changed: revision no on titlebar and about dialog.
    
  + hbqt/qtdesigner/hbqtdesigner.ch
  + hbqt/qtnetwork/hbqtnetwork.ch
    + Added: dummy headers to be uniform with all libs.

  * qtcontribs.hbp
    + Added: qtwebkit library and commented out.

2012-10-01 17:01 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbaddons.hbp
  * qtcontribs.hbp
    % Renamed: hbaddons => qtcontribs as per discussion with Viktor.
       We all supported his viewpoint.

2012-09-30 09:50 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtsql/qth/QSqlQuery.qth
    ! Fixed: error where build was failing, a regression.

2012-09-29 22:18 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbxbp/dialog.prg
  * hbxbp/menubar.prg
  * hbxbp/tabpage.prg
  * hbxbp/toolbar.prg
    % Modifications to construct widgets with proper parenting.
       This may result in better protol to free objects from 
       GC point of view.

2012-09-29 21:58 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/hbide.qrc
  * hbide/resources/designer.png
  + hbide/resources/dockingwidgets.png
  + hbide/resources/ideparts.png
  + hbide/resources/menu.png
  + hbide/resources/selectproject.png
  + hbide/resources/toolbars.png
    + Added: new images to enrich menu options.

  * hbide/xbpaddons/dbu.prg
  * hbide/xbpaddons/reports.prg
    ! Minor.

  * hbide/actions.prg
  * hbide/console.prg
  * hbide/docks.prg
  * hbide/docwriter.prg
  * hbide/edit.prg
  * hbide/editor.prg
  * hbide/findreplace.prg
  * hbide/hbqtoolbar.prg
  * hbide/main.prg
  * hbide/misc.prg
  * hbide/parts.prg
  * hbide/saveload.prg
  * hbide/shortcuts.prg
  * hbide/themes.prg
  * hbide/uisrcmanager.prg
    % Optimizations.
    + Implemented: concept of manageable tool-box containing almost 
       entire set of actions spread across menus and toolbars. This 
       tiny toolbox can be called with Ctrl+M and appears right near 
       the editing cursor position. The interface to manage this toolbox
       is underway, which beside other things, will facilitate to 
       configure it visually as to which icons, at what position:row-col,
       should appear. The goal is to allow users to hide all toolbars from 
       applications window and call this toolbox whenever there is a need.
       A work-in-progress. But the toolbox is functional with Ctrl+M.

  * hbide/projectwizard.prg
  * hbide/projmanager.prg
    + Advanced: "New Project Wizard".

2012-09-29 19:15 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbide/docviewgenerator.ui
    % Refined: the working of slider of tree and view widgets, reported 
      on users-list. The tree pane area was unable to be expanded on 
      the right and hence functions list contents were not visible 
      properly.

2012-09-29 19:10 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtcore/hbqt_bind.cpp
    % Optimization leading to proper object destruction on Qt level,
       in certain cases. This optimization has no visible impact, but 
       certainly improves memory consumption in applications which 
       have high rate of creation/destruction cycles.

2012-09-29 16:43 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbqt/qtgui/qth/QBoxLayout.qth
  * hbqt/qtgui/qth/QGridLayout.qth
  * hbqt/qtgui/qth/QLayout.qth
  * hbqt/qtgui/qth/QStandardItemModel.qth
    ! Fixed: the GPF og HbIDE on EXIT on MSVC and *nix systems discovered 
       by Przemek. On MSVC it is fixed, and nixes, I hope should have been 
       fixed too. Can someone confirm ?

2012-09-29 16:31 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * hbaddons.hbp
    + Added: all Qt based libraries, but kept commented. Please uncomment one 
       required by you.

2012-09-29 15:39 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + Initial commit in decided repo after all commits below in a temp repo 
    to make the code compilable and workable.

2012-09-29 12:55 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  * ChangeLog
  * hbaddons.hbp
    + Added: missing SVN properties markers.

2012-09-29 12:25 UTC-0800 Pritpal Bedi (bedipritpal at hotmail.com)
  + SVN Properties.

2012-09-29 19:30 UTC+0100 Maurizio la Cecilia (m.lacecilia at gmail.com)
  + hbaddons.hbp
    + added .hbp for to make it easy to build in a shot with hbmk2
  * hbide/hbide.hbp
  * hbide/xbpaddons/xbpaddons.hbp
  * hbnetioqt/hbnetioq.hbp
  * hbqt/hbqt_common.hbm
  * hbxbp/hbxbp.hbp
    * changed the path to output the built libs/exes
  * hbide/xbpaddons/dbu.prg
    * correct the references of renamed ui files in Harbour rev. 18121

2012-09-29 17:30 UTC+0100 Maurizio la Cecilia (m.lacecilia at gmail.com)
  + Initial Commit.